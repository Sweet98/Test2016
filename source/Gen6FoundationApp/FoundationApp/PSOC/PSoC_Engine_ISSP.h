//==============================================================================
//    Engine PSoC ISSP Flash Function Header File
//==============================================================================
//
//   $RCSfile: Gen6FoundationApp/FoundationApp/PSOC/PSoC_Engine_ISSP.h $
//   $Revision: 1.9 $
//   $Date: 2011/11/10 03:51:36EST $
//
//==============================================================================

//==============================================================================


#ifndef _PSOC_ENGINE_ISSP_H
#define _PSOC_ENGINE_ISSP_H


#include 	"platform.h"
#include 	"iMX25_GPIO.h"
#include 	"iMX25_IOMUX.h"
#include "HardwareMacros.h"		//Provides Macros for setting registers
#define		DR_FORM_FACTOR_RELEASED_BOARD		1

#if			DR_FORM_FACTOR_RELEASED_BOARD	                //4800dr pod with mega engine
	#define	RESET_BIT   				Bit11
	#define	RESET_OCR_BIT_ONE   		pOCR1_D->b.Bit22
	#define	RESET_OCR_BIT_TWO   		pOCR1_D->b.Bit23
#else    //IF 4600DR DEVELOPMENT BOARD
	#define	RESET_BIT					Bit31
	#define	RESET_OCR_BIT_ONE			pOCR2_D->b.Bit30
	#define	RESET_OCR_BIT_TWO			pOCR2_D->b.Bit31
#endif

#define	ENG_PSOC_BLOCK_SIZE	64
#define	BLOCKS_IN_24x_PSOC	64
#define	EngTakeControl			1
#define 	EngRelease	  			0

#define	ENG_MAKE_PSOC_LINES_GPIO	HAZARD_WRITE_REG(IOMUXC_SW_MUX_CTL_PAD_EXT_ARMCLK,MUX_MODE_5); HAZARD_WRITE_REG(IOMUXC_SW_MUX_CTL_PAD_FEC_RX_DV,MUX_MODE_5);HAZARD_WRITE_REG(IOMUXC_SW_MUX_CTL_PAD_KPP_ROW3,MUX_MODE_5)
#define CONFIG_POWER_ENA_PAD_TO_GPIO	*((volatile unsigned long *)(IOMUXC_SW_MUX_CTL_PAD_KPP_ROW2)) = 0x00000005
#define SET_POWER_ENA_DR_REG_HIGH							(*((volatile unsigned long *)(GPIO2_DR0))) |= ((unsigned long)0x00000001 << (31))

	//set JADE power data register to 0 to turn off power
#define SET_POWER_ENA_DR_REG_LOW							(*((volatile unsigned long *)(GPIO2_DR0))) &= ~((unsigned long)0x00000001 << (31))

	//set JADE power direction register to output
#define SET_POWER_ENA_DATA_DIR_OUTPUT						(*((volatile unsigned long *)(GPIO2_GDIR0))) |= ((unsigned long)0x00000001 << (31))

#ifdef VUQUEST3310
#define	ENG_SAVE_COM_LINES_STATE	sdataGIUS=READ_FIELD(GPIO3_GDIR0,GPIO_BIT15_LSH,GPIO_BIT15_WID); sclkGUIS = READ_FIELD(GPIO4_GDIR0,GPIO_BIT29_LSH,GPIO_BIT29_WID)
#define	ENG_RESTORE_COM_LINES		HAZARD_WRITE_FIELD_TO_REG(GPIO3_GDIR0,GPIO_BIT15_LSH,GPIO_BIT15_WID,sdataGIUS); HAZARD_WRITE_FIELD_TO_REG(GPIO4_GDIR0,GPIO_BIT29_LSH,GPIO_BIT29_WID,sclkGUIS)
#else
#define	ENG_SAVE_COM_LINES_STATE	sdataGIUS=READ_FIELD(GPIO3_GDIR0,GPIO_BIT15_LSH,GPIO_BIT15_WID); sclkGUIS = READ_FIELD(GPIO3_GDIR0,GPIO_BIT12_LSH,GPIO_BIT12_WID) //sdataPUEN=READ_FIELD(GPIO3_GDIR0,GPIO_BIT11_LSH,GPIO_BIT11_WID); sclkGUIS=pGIUS_D->b.Bit14=1;
#define	ENG_RESTORE_COM_LINES		HAZARD_WRITE_FIELD_TO_REG(GPIO3_GDIR0,GPIO_BIT15_LSH,GPIO_BIT15_WID,sdataGIUS); HAZARD_WRITE_FIELD_TO_REG(GPIO3_GDIR0,GPIO_BIT12_LSH,GPIO_BIT12_WID,sclkGUIS) //pPUEN_D->b.Bit13=sdataPUEN; pGIUS_D->b.Bit14=sclkGUIS;
#endif // end of #ifdef VUQUEST3310

#define	ENG_PSOC_XRES_DIR_OUT		HAZARD_WRITE_FIELD_TO_REG(GPIO3_GDIR0,GPIO_BIT0_LSH,GPIO_BIT0_WID,GPIO_GDIR_OUTPUT)
#define	ENG_PSOC_XRES_DIR_IN			HAZARD_WRITE_FIELD_TO_REG(GPIO3_GDIR0,GPIO_BIT0_LSH,GPIO_BIT0_WID,GPIO_GDIR_INPUT) 
#define	ENG_PSOC_XRES_HIGH			HAZARD_WRITE_FIELD_TO_REG(GPIO3_DR0,GPIO_BIT0_LSH,GPIO_BIT0_WID,0x1)
#define	ENG_PSOC_XRES_LOW			HAZARD_WRITE_FIELD_TO_REG(GPIO3_DR0,GPIO_BIT0_LSH,GPIO_BIT0_WID,0x0)

#define	ENG_PSOC_SDATA_DIR_OUT		HAZARD_WRITE_FIELD_TO_REG(GPIO3_GDIR0,GPIO_BIT15_LSH,GPIO_BIT15_WID,GPIO_GDIR_OUTPUT)
#define	ENG_PSOC_SDATA_DIR_IN		HAZARD_WRITE_FIELD_TO_REG(GPIO3_GDIR0,GPIO_BIT15_LSH,GPIO_BIT15_WID,GPIO_GDIR_INPUT)
#define	ENG_PSOC_SDATA_HIGH			HAZARD_WRITE_FIELD_TO_REG(GPIO3_DR0,GPIO_BIT15_LSH,GPIO_BIT15_WID,0x1)
#define	ENG_PSOC_SDATA_LOW			HAZARD_WRITE_FIELD_TO_REG(GPIO3_DR0,GPIO_BIT15_LSH,GPIO_BIT15_WID,0x0)
//#define	ENG_PSOC_SDATA				pDR_D->b.Bit13
#define	ENG_PSOC_SDATA_READ			READ_FIELD(GPIO3_PSR0,GPIO_BIT15_LSH,GPIO_BIT15_WID)
#ifdef VUQUEST3310
#define	ENG_PSOC_SCLK_DIR_OUT		HAZARD_WRITE_FIELD_TO_REG(GPIO4_GDIR0,GPIO_BIT29_LSH,GPIO_BIT29_WID,GPIO_GDIR_OUTPUT)
#define	ENG_PSOC_SCLK_HIGH			HAZARD_WRITE_FIELD_TO_REG(GPIO4_DR0,GPIO_BIT29_LSH,GPIO_BIT29_WID,0x1)
#define	ENG_PSOC_SCLK_LOW			HAZARD_WRITE_FIELD_TO_REG(GPIO4_DR0,GPIO_BIT29_LSH,GPIO_BIT29_WID,0x0)
#else
#define	ENG_PSOC_SCLK_DIR_OUT		HAZARD_WRITE_FIELD_TO_REG(GPIO3_GDIR0,GPIO_BIT12_LSH,GPIO_BIT12_WID,GPIO_GDIR_OUTPUT)
#define	ENG_PSOC_SCLK_HIGH			HAZARD_WRITE_FIELD_TO_REG(GPIO3_DR0,GPIO_BIT12_LSH,GPIO_BIT12_WID,0x1)
#define	ENG_PSOC_SCLK_LOW			HAZARD_WRITE_FIELD_TO_REG(GPIO3_DR0,GPIO_BIT12_LSH,GPIO_BIT12_WID,0x0)
#endif // end of #ifdef VUQUEST3310

#define	ENG_CYCLE_SCLK				ENG_PSOC_SCLK_HIGH; \
										HALF_BIT_DELAY; \
										ENG_PSOC_SCLK_LOW;  \
										HALF_BIT_DELAY

   // For some reason ??? we need this slower clock when waiting for the PSOC to do a Block Read
#define	ENG_CYCLE_SCLK_SLOW		ENG_PSOC_SCLK_HIGH; \
										HALF_BIT_DELAY_IN_READ_MODE; \
										ENG_PSOC_SCLK_LOW;  \
										HALF_BIT_DELAY_IN_READ_MODE

#define  ENG_HIGH_Z_CYCLE_ENTERING_READ		ENG_PSOC_SCLK_HIGH; 	\
													HALF_BIT_DELAY;	\
													ENG_PSOC_SCLK_LOW; 	\
													HALF_BIT_DELAY; 	\
													ENG_PSOC_SCLK_HIGH; 	\
													HALF_BIT_DELAY_IN_READ_MODE

#define  ENG_HIGH_Z_CYCLE_LEAVING_READ		ENG_PSOC_SCLK_LOW; 	\
													HALF_BIT_DELAY_IN_READ_MODE; \
													ENG_PSOC_SCLK_HIGH; 	\
													HALF_BIT_DELAY; 	\
													ENG_PSOC_SCLK_LOW; 	\
													HALF_BIT_DELAY

#endif


