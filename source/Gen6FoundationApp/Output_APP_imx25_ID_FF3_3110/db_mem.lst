


ARM Macro Assembler    Page 1 


    1 00000000         ;;
    2 00000000         ;    Assembly defines and code to support memory initial
                       ization necessary being done with assembly code
    3 00000000         ;;
    4 00000000         ;;======================================================
                       ================================
    5 00000000         ;; Revision information
    6 00000000         ;;======================================================
                       ================================
    7 00000000         ;; $RCSfile: db_shared/db_mem.s $
    8 00000000         ;; $Revision: 1.11.2.39 $
    9 00000000         ;; $Date: 2010/12/20 14:15:18EST $
   10 00000000         ;;======================================================
                       ================================
   11 00000000         ;;
   12 00000000         
   13 00000000                 INCLUDE          db_memap.s
    1 00000000         ;/******************************************************
                       ******************/
    2 00000000         ;//
    3 00000000         ;// HHP 4480 embedded firmware
    4 00000000         ;// Memory map
    5 00000000         ;//  Date:       2/21/02
    6 00000000         ;//  Tools:      ARM SDT 2.5 for starters... will be ARM
                        ADS 1.1 or Metaware
    7 00000000         ;//  Target:     Dragon Ball MX1 based 4480
    8 00000000         ;;
    9 00000000         ;;======================================================
                       ================================
   10 00000000         ;; Revision information
   11 00000000         ;;======================================================
                       ================================
   12 00000000         ;; $RCSfile: db_shared/db_memap.s $
   13 00000000         ;; $Revision: 1.21.2.10 $
   14 00000000         ;; $Date: 2009/10/06 17:11:17EDT $
   15 00000000         ;;======================================================
                       ================================
   16 00000000         ;*******************************************************
                       *****************
   17 00000000         ;*******************************************************
                       *****************
   18 00000000         
   19 00000000         
   20 00000000         ;; Flash fixed addresses (1MB)
   21 00000000         ;;
   22 00000000         ;; 0x00000000 to 0x00003FFF Boot code
   23 00000000         ;; 0x00004000 to 0x00005FFF Backup (User Defaults) Confi
                       guration data
   24 00000000         ;; 0x00006000 to 0x00007FFF Configuration data
   25 00000000         ;; 0x00008000 to 0x0000FFFF Manufacturing configuration 
                       area
   26 00000000         ;; 0x00010000 to 0x000EFFFF Operational code
   27 00000000         ;; 0x000F0000 to 0x000FFFF7 Reserved
   28 00000000         ;; 0x000FFFF8 to 0x000FFFFB Operational code size
   29 00000000         ;; 0x000FFFFC to 0x000FFFFF Operational code CRC
   30 00000000         
   31 00000000         
   32 00000000         ;; RAM fixed addresses (16 MB)
   33 00000000         ;;



ARM Macro Assembler    Page 2 


   34 00000000         ;;    0x08000000 Op code code then data then heap
   35 00000000         ;;    various stacks run from top down
   36 00000000         ;;    0x08ffffff top of RAM
   37 00000000         
   38 00000000         
   39 00000000         ;; DDR SDRAM fixed addresses (128 MB)
   40 00000000         ;;
   41 00000000         ;;    0xA0000000 Op code code then data then heap for iM
                       X27
   42 00000000         ;;    various stacks run from top down
   43 00000000         ;;    0xA7FFFFFF top of RAM 
   44 00000000         
   45 00000000         ;; DDR SDRAM fixed addresses (128 MB)
   46 00000000         ;;
   47 00000000         ;;    0x80000000 Op code code then data then heap for iM
                       X25
   48 00000000         ;;    various stacks run from top down
   49 00000000         ;;    0xA7FFFFFF top of RAM 
   50 00000000         
   51 00000000         
   52 00000000         ;;
   53 00000000         ;;This is set by assembler build options in the Make fil
                       e 
   54 00000000         ;;
   55 00000000         ;;GBLS    platform_current
   56 00000000         ;platform_current SETS "mxl"  ;;"mxl"
   57 00000000         ;platform_current SETS "imx27"  ;;"imx27"
   58 00000000         ;platform_current SETS "imx25"  ;;"imx25"
   59 00000000         
   60 00000000         ;;
   61 00000000         ;; various sizes 
   62 00000000         
   63 00000000 40000000 
                       SZ_1G   EQU              0x40000000
   64 00000000 08000000 
                       SZ_128M EQU              0x08000000
   65 00000000 04000000 
                       SZ_64M  EQU              0x04000000
   66 00000000 02000000 
                       SZ_32M  EQU              0x02000000
   67 00000000 01000000 
                       SZ_16M  EQU              0x01000000
   68 00000000 00800000 
                       SZ_8M   EQU              0x00800000
   69 00000000 00400000 
                       SZ_4M   EQU              0x00400000
   70 00000000 00200000 
                       SZ_2M   EQU              0x00200000
   71 00000000 00100000 
                       SZ_1M   EQU              0x00100000
   72 00000000 00080000 
                       SZ_512K EQU              0x00080000
   73 00000000         
   74 00000000         ;; 2 areas of significant memory blocks are the  externa
                       l SDRAM, and the external Flash ROM
   75 00000000         ;;Configure them by size and platform here
   76 00000000         ;*******************************************************
                       ****************************
   77 00000000                 IF               platform_current = "imx25"



ARM Macro Assembler    Page 3 


   78 00000000         ;*******************************************************
                       ****************************
   79 00000000         
   80 00000000 80000000 
                       ExternalRamBase
                               EQU              0x80000000  ;; beginning of SDR
                                                            AM, CSD0
   81 00000000 88000000 
                       ExternalRamLimit
                               EQU              0x88000000
   82 00000000 08000000 
                       ExternalRamSize
                               EQU              0x08000000
   83 00000000                 IF               :DEF: CACHEWRITETHRU
   86 00000000 00000C0E 
                       DRAM_ACCESS
                               EQU              0xc0e       ; AP=11, domain0, C
                                                            =B=1
   87 00000000                 ENDIF
   88 00000000 00000C02 
                       NCDRAM_ACCESS
                               EQU              0xc02       ; AP=11, domain0, C
                                                            =B=0
   89 00000000         
   90 00000000         ;; External Flash ROM range
   91 00000000 A0000000 
                       ExternalRomStart
                               EQU              0xA0000000
   92 00000000 A0000000 
                       ExternalRomBase
                               EQU              ExternalRomStart
   93 00000000         
   94 00000000         ;; CACHE
   95 00000000 A0000000 
                       CachedExternalRomBase
                               EQU              ExternalRomStart
   96 00000000 00400000 
                       UncachedExternalRomBase
                               EQU              0x00400000
   97 00000000 00100000 
                       ExternalRomSize
                               EQU              0x00100000
   98 00000000 0000080A 
                       FLASH_CACHED_ACCCESS
                               EQU              0x80a       ; AP=10, domain0, c
                                                            =1, b=0
   99 00000000 00000802 
                       FLASH_UNCACHED_ACCCESS
                               EQU              0x802       ; AP=10, domain0, c
                                                            =0, b=0
  100 00000000         
  101 00000000         ;; x25 i/o space, the BASE Address should be aligned to 
                       1M boundaries which are used for the MMU table
  102 00000000         
  103 00000000 00000001 
                       IO1_SIZE
                               EQU              0x1         ; I/O area is actua
                                                            lly 156K in size, b
                                                            ut 1M is the minimu



ARM Macro Assembler    Page 4 


                                                            m
  104 00000000 00000C02 
                       IO1_ACCESS
                               EQU              0xc02       ; AP=11, domain0, c
                                                            =b=0
  105 00000000 43F00000 
                       IO1_BASE
                               EQU              0x43F00000  ; Mx25 internal reg
                                                            isters and i/o
  106 00000000 00000001 
                       IO2_SIZE
                               EQU              0x1         ;1 Mb 
  107 00000000 00000C02 
                       IO2_ACCESS
                               EQU              0xc02       ; non cache non buf
                                                            fer
  108 00000000 50000000 
                       IO2_BASE
                               EQU              0x50000000  ; Mx25 internal reg
                                                            isters and i/o
  109 00000000 00000001 
                       IO3_SIZE
                               EQU              0x1         ;1 Mb 
  110 00000000 00000C02 
                       IO3_ACCESS
                               EQU              0xc02       ; non cache non buf
                                                            fer
  111 00000000 53F00000 
                       IO3_BASE
                               EQU              0x53F00000  ; Mx25 internal reg
                                                            isters and i/o
  112 00000000 00000001 
                       IO4_SIZE
                               EQU              0x1         ;1 Mb 
  113 00000000 00000C02 
                       IO4_ACCESS
                               EQU              0xc02       ; non cache non buf
                                                            fer
  114 00000000 68000000 
                       IO4_BASE
                               EQU              0x68000000  ; Mx25 internal reg
                                                            isters and i/o (asi
                                                            c interrupt control
                                                            ler registers)
  115 00000000 00000001 
                       IO5_SIZE
                               EQU              0x1         ;1 Mb 
  116 00000000 00000C02 
                       IO5_ACCESS
                               EQU              0xc02       ; non cache non buf
                                                            fer
  117 00000000 B8000000 
                       IO5_BASE
                               EQU              0xB8000000  ; Mx25 internal reg
                                                            isters and i/o (sdr
                                                            am controller m3if 
                                                            weim emi)
  118 00000000         
  119 00000000         ;;Vector Table



ARM Macro Assembler    Page 5 


  120 00000000 00000000 
                       VectorTableVirtualAddress
                               EQU              0x00000000
  121 00000000         
  122 00000000                 IF               :DEF: RAMBASEDBOOT
  127 00000000 80000000 
                       VectorTablePhysicalAddress
                               EQU              ExternalRamBase
  128 00000000                 ENDIF
  129 00000000         
  130 00000000 00000FFE 
                       VECTOR_TABLE_ACCESS
                               EQU              0xffe       ; AP=11, domain0, C
                                                            =B=1
  131 00000000 00000100 
                       VECTOR_TABLE_SIZE
                               EQU              256         ; 256 4K entries
  132 00000000         ;; on chip ram possible location for vectors 45kb  
  133 00000000 00000001 
                       VRAM_NUMSECTIONS
                               EQU              1           ;; use 1 level 1 sc
                                                            tion 
  134 00000000 78000000 
                       VRAM_BASE
                               EQU              0x78000000  ;; start of 1M sect
                                                            ion that vram is in
                                                             vram actually
  135 00000000 00000C0E 
                       VRAM_ACCESS
                               EQU              0xc0e       ;; cachable buffera
                                                            ble 
  136 00000000         
  137 00000000         
  138 00000000         ;*******************************************************
                       ****************************
  139 00000000                 ELSE
  253                          ENDIF                        ;;end platform iMX2
                                                            5
  254 00000000         ;*******************************************************
                       ****************************
  255 00000000         
  256 00000000         ;;
  257 00000000         ;; Fixed address space configuration at the top of RAM. 
                        The MMU level 1 translation tables and the cache disabl
                       e buffer
  258 00000000         ;; are at the top of RAM, because their sizes should not
                        be changing.  The stacks are below them, with the syste
                       m mode / user
  259 00000000         ;; mode stack at the bottom, since it is the most likely
                        candidate for growth.
  260 00000000         ;;
  261 00000000 00004000 
                       Level1tabSize
                               EQU              0x4000      ;; MMU level 1 tran
                                                            slation table size 
                                                            is 16K
  262 00000000         
  263 00000000                 IF               :DEF: RAMBASEDBOOT
  266 00000000 87FFC000 



ARM Macro Assembler    Page 6 


                       Level1tab
                               EQU              ExternalRamLimit - Level1tabSiz
e 
                                                            ;; MMU level 1 tran
                                                            slation table 16K b
                                                            elow top of RAM
  267 00000000                 ENDIF
  268 00000000         
  269 00000000 00001000 
                       Level2VectorTableSize
                               EQU              0x1000      ;; MMU level 2 vect
                                                            or table translatio
                                                            n table size is 4K
  270 00000000 87FFB000 
                       Level2VectorTable
                               EQU              Level1tab - Level2VectorTableSi
ze 
                                                            ;; MMU level 2 vect
                                                            or translation tabl
                                                            e 4K below level 1 
                                                            table
  271 00000000         ;; MMU level 1 translation table
  272 00000000         
  273 00000000         
  274 00000000         
  275 00000000         ;;CORSICA build  ;; used to be CF2D, but this is really 
                       a Corsica change (which includes mxl)
  276 00000000         
  277 00000000         ;; External Ram Model
  278 00000000 00000400 
                       SVC_StackSize
                               EQU              1024
  279 00000000 00000400 
                       ABT_StackSize
                               EQU              1024
  280 00000000 00000400 
                       UNDEF_StackSize
                               EQU              1024
  281 00000000 00000400 
                       IRQ_StackSize
                               EQU              1024
  282 00000000 00000400 
                       FIQ_StackSize
                               EQU              1024
  283 00000000         
  284 00000000                 IF               :DEF: RAMBASEDBOOT
  289 00000000 00062000 
                       SYS_StackSize
                               EQU              0x62000
  290 00000000                 ENDIF
  291 00000000         
  292 00000000 87FFB000 
                       Stack_Limit
                               EQU              Level2VectorTable ; give 1K to 
                                                            all stacks and put 
                                                            them at the top of 
                                                            RAM
  293 00000000 87FFB000 
                       SVC_Stack



ARM Macro Assembler    Page 7 


                               EQU              Stack_Limit
  294 00000000 87FFAC00 
                       ABT_Stack
                               EQU              SVC_Stack-SVC_StackSize
  295 00000000 87FFA800 
                       UNDEF_Stack
                               EQU              ABT_Stack-ABT_StackSize
  296 00000000 87FFA400 
                       IRQ_Stack
                               EQU              UNDEF_Stack-UNDEF_StackSize
  297 00000000 87FFA000 
                       FIQ_Stack
                               EQU              IRQ_Stack-IRQ_StackSize
  298 00000000 87FF9C00 
                       USR_Stack
                               EQU              FIQ_Stack-FIQ_StackSize
  299 00000000 87FF9C00 
                       SYS_Stack
                               EQU              USR_Stack
  300 00000000         
  301 00000000                 IF               :DEF: RAMBASEDBOOT
  305 00000000 87F97C00 
                       Lower_Stack_Limit
                               EQU              USR_Stack-SYS_StackSize ; User 
                                                            / system mode stack
                                                             is ~400K
  306 00000000                 ENDIF
  307 00000000         
  308 00000000 87F97C00 
                       End_Of_Heap
                               EQU              Lower_Stack_Limit
  309 00000000         
  310 00000000         ;;END CORSICA
  311 00000000         
  312 00000000         
  313 00000000         
  314 00000000 00000000 
                       ROMStartBootCode
                               EQU              0x0
  315 00000000         
  316 00000000 80001000 
                       RAMStartOpCode
                               EQU              ExternalRamBase +0x1000
  317 00000000         
  318 00000000         
  319 00000000                 INCLUDE          db_sharedtable_h.s ;; this will
                                                             integrate the asso
                                                            ciative shared boot
                                                            /app table into all
                                                             places it is neces
                                                            sary
    1 00000000         ;/******************************************************
                       ******************/
    2 00000000         ;//
    3 00000000         ;// HHP 4480 embedded firmware
    4 00000000         ;//
    5 00000000         ;//  Shared table structure for info shared between boot
                        and assembly code
    6 00000000         ;**** Note this is the assembly version and there is a C



ARM Macro Assembler    Page 8 


                        equivalent
    7 00000000         ;**** For now, the assumption is he/she who enters here,
                        must also enter there and visa versa
    8 00000000         ;//  Date:       2/24/02
    9 00000000         ;//  Tools:      ARM SDT 2.5 for starters... will be ARM
                        ADS 1.1 or Metaware
   10 00000000         ;//  Target:     D-ball 4480
   11 00000000         ;//
   12 00000000         ;//=====================================================
                       =================================
   13 00000000         ;//   Revision information
   14 00000000         ;//=====================================================
                       =================================
   15 00000000         ;// $RCSfile: db_shared/db_sharedtable_h.s $
   16 00000000         ;// $Revision: 1.12.2.5 $
   17 00000000         ;// $Date: 2009/03/10 11:49:29EDT $
   18 00000000         ;//=====================================================
                       =================================
   19 00000000         ;/******************************************************
                       ******************/
   20 00000000         ;/*|====================================================
                       ===================
   21 00000000         ;  |           MODIFICATION HISTORY
   22 00000000         ;  |====================================================
                       ===================
   23 00000000         ;*******************************************************
                       ******************/
   24 00000000         
   25 00000000         ;; This is the assembly equivalent for the C header for 
                       the same purpose
   26 00000000         ;; Some time was spent imagining a slick way to only hav
                       e to change one of these files, but with the changing la
                       ndscape toolswise
   27 00000000         ;; I didn't want to do something that was tool specific.
                         For this reason, any time things are added to the tabl
                       e, it should be added
   28 00000000         ;; in 2 places... here and in db_sharedtable.h
   29 00000000         
   30 00000000         ;;// So to define the memory area definitely
   31 00000000         
   32 00000000                 IF               :DEF: RAMBASEDBOOT
   36 00000000 80000C00 
                       ACTUAL_TABLE_LOCATION_S
                               EQU              RAMStartOpCode - 0x400
   37 00000000         
   38 00000000                 ENDIF
   39 00000000         
   40 00000000         ;; Actual Shared Structure/Table -- Again NOTE, if you a
                       dd here, please add equivalent entry into the db_sharedt
                       able.h C header
   41 00000000 80000C00 
                       SIZE_OF_SHARED_TABLE_S
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x0 ;
                                                            ; how big the table
                                                             is
   42 00000000 80000C04 
                       BOOT_CODE_MINOR_VERSION_S
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x4 ;
                                                            ; Boot code version



ARM Macro Assembler    Page 9 


                                                             (minor)
   43 00000000 80000C08 
                       BOOT_CODE_MAJOR_VERSION_S
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x8 ;
                                                            ; Boot code version
                                                             (minor)
   44 00000000 80000C0C 
                       SIZE_OF_OP_CODE_TO_STORE_S
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xc ;
                                                            ; means for boot co
                                                            de to inform app to
                                                             *consider* storing
                                                             itself to flash
   45 00000000 80000C10 
                       SIZE_OF_SDRAM_S
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x10 
                                                            ;; means to inform 
                                                            app of size of RAM
   46 00000000         
   47 00000000         ;; Boot code sets DYNAMIC_MEMORY_MAP to 0x12345678 to in
                       dicate that the boot code has configured the dynamic mem
                       ory map variables that follow after.
   48 00000000         ;; Since application code is looking for this value, but
                        may be running on a unit with older boot code that does
                       n't load this value,
   49 00000000         ;; INVERSE_DYNAMIC_MEMORY_MAP is loaded with the 1s comp
                       lement of DYNAMIC_MEMORY_MAP.  The application can compa
                       re DYNAMIC_MEMORY_MAP to the
   50 00000000         ;; inverse of INVERSE_DYNAMIC_MEMORY_MAP and if they don
                       't match, it knows that DYNAMIC_MEMORY_MAP is not valid 
                       and that it will have to default to
   51 00000000         ;; an 8MB RAM space memory map.
   52 00000000 80000C14 
                       DYNAMIC_MEMORY_MAP
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x14
   53 00000000 80000C18 
                       INVERSE_DYNAMIC_MEMORY_MAP
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x18
   54 00000000         
   55 00000000 80000C1C 
                       CACHED_MEMORY_BASE
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x1C 
                                                            ;; Address of cache
                                                            d memory space, whi
                                                            ch is a
   56 00000000         ;; mirror of non-cached space, but allows cached /
   57 00000000         ;; buffered access to memory.
   58 00000000 80000C20 
                       MEMORY_SIZE
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x20 
                                                            ;; Size of detected
                                                             memory in bytes.
   59 00000000         
   60 00000000 80000C24 
                       HEAP_START
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x24 
                                                            ;; Start location o
                                                            f the application h
                                                            eap



ARM Macro Assembler    Page 10 


   61 00000000 80000C28 
                       HEAP_END
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x28 
                                                            ;; End location of 
                                                            the application hea
                                                            p
   62 00000000 80000C2C 
                       APP_IMAGE_RO_BASE
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x2C 
                                                            ;; Start of read on
                                                            ly space in applica
                                                            tion image
   63 00000000 80000C30 
                       APP_IMAGE_RO_END
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x30 
                                                            ;; End of read only
                                                             space in applicati
                                                            on image
   64 00000000 80000C34 
                       APP_IMAGE_RW_BASE
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x34 
                                                            ;; Start of read / 
                                                            write space in appl
                                                            ication image
   65 00000000 80000C38 
                       APP_IMAGE_RW_END
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x38 
                                                            ;; End of read / wr
                                                            ite space in applic
                                                            ation image
   66 00000000 80000C3C 
                       APP_IMAGE_ZI_BASE
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x3C 
                                                            ;; Start of zero in
                                                            it space in applica
                                                            tion image
   67 00000000 80000C40 
                       APP_IMAGE_ZI_END
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x40 
                                                            ;; End of zero init
                                                             space in applicati
                                                            on image
   68 00000000 80000C44 
                       BOOT_CODE_VERSION_STRING_S
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x44 
                                                            ;; Boot code versio
                                                            n string location.
   69 00000000 80000C48 
                       COMPRESSED_APPLICATION_LOCATION
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x48 
                                                            ;;
   70 00000000 80000C4C 
                       COMPRESSED_APPLICATION_SIZE
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x4C 
                                                            ;;
   71 00000000 80000C50 
                       APPLICATION_COMPRESSOR_LOCATION
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x50 
                                                            ;;



ARM Macro Assembler    Page 11 


   72 00000000 80000C54 
                       COMPRESSOR_AND_COMPRESSED_APPLICATION_SIZE
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x54 
                                                            ;;
   73 00000000         
   74 00000000         ;; Boot code sets FLASH_DISK_LOCATION to the address whe
                       re it found a flash disk header with a valid application
                        to load.  If none is found, this value
   75 00000000         ;; should be 0xFFFFFFFF.  Since application code is look
                       ing for this value, but may be running on a unit with ol
                       der boot code that doesn't load this
   76 00000000         ;; value, INVERSE_FLASH_DISK_LOCATION is loaded with the
                        1s complement of FLASH_DISK_LOCATION.  The application 
                       can compare FLASH_DISK_LOCATION to the
   77 00000000         ;; inverse of INVERSE_FLASH_DISK_LOCATION and if they do
                       n't match, it knows that FLASH_DISK_LOCATION is not vali
                       d and that it will have to find the
   78 00000000         ;; flash disk itself.
   79 00000000 80000C58 
                       FLASH_DISK_LOCATION
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x58 
                                                            ;;
   80 00000000 80000C5C 
                       INVERSE_FLASH_DISK_LOCATION
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x5C 
                                                            ;;
   81 00000000         
   82 00000000         ;; Boot code startup times that application may want acc
                       ess to for reporting purposes.
   83 00000000 80000C60 
                       BOOT_MAIN_ENTRY_TIME
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x60 
                                                            ;;
   84 00000000 80000C64 
                       BOOT_HARDWARE_SETUP_TIME
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x64 
                                                            ;;
   85 00000000 80000C68 
                       BOOT_MEMORY_CHECK_TIME
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x68 
                                                            ;;
   86 00000000 80000C6C 
                       BOOT_ENTRY_POINT_INFORMATION_VALIDATION_TIME
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x6C 
                                                            ;;
   87 00000000 80000C70 
                       BOOT_APPLICATION_COPY_TIME
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x70 
                                                            ;;
   88 00000000 80000C74 
                       BOOT_CHECKSUM_VALIDATION_TIME
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x74 
                                                            ;;
   89 00000000 80000C78 
                       BOOT_CRC_VALIDATION_TIME
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x78 
                                                            ;;
   90 00000000 80000C7C 
                       BOOT_TOTAL_APPLICATION_CODE_LOAD_TIME



ARM Macro Assembler    Page 12 


                               EQU              ACTUAL_TABLE_LOCATION_S + 0x7c 
                                                            ;;
   91 00000000         
   92 00000000 80000C80 
                       COMPRESSOR_SIZE
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x80 
                                                            ;;
   93 00000000 80000C84 
                       COMPRESSED_APPLICATION_HEADER_SIZE
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x84 
                                                            ;;
   94 00000000         
   95 00000000 80000C88 
                       NON_CACHED_MEMORY_BASE
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x88 
                                                            ;; Address of non-c
                                                            ached memory space,
                                                             which is a
   96 00000000         ;; mirror of cached space, but allows non-cached /
   97 00000000         ;; non-buffered access to memory.
   98 00000000         
   99 00000000 80000C8C 
                       CACHED_ROM_BASE
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x8C 
                                                            ;; Address of cache
                                                            d ROM space, which 
                                                            is a
  100 00000000         ;; mirror of non-cached space, but allows cached
  101 00000000         ;; access to memory for speedier read operations.
  102 00000000 80000C90 
                       NON_CACHED_ROM_BASE
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x90 
                                                            ;; Address of non-c
                                                            ached ROM space, wh
                                                            ich is a
  103 00000000         ;; mirror of cached space, but allows non-cached /
  104 00000000         ;; non-buffered access to ROM.
  105 00000000 80000C94 
                       ROM_SIZE
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x94 
                                                            ;; Size of detected
                                                             ROM in bytes.
  106 00000000 80000C98 
                       MMU_LEVEL_1_TABLE
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x98 
                                                            ;; Address of MMU l
                                                            evel 1 translation 
                                                            table.
  107 00000000 80000C9C 
                       MMU_LEVEL_1_TABLE_SIZE
                               EQU              ACTUAL_TABLE_LOCATION_S + 0x9C 
                                                            ;; Size of MMU leve
                                                            l 1 translation tab
                                                            le.
  108 00000000 80000CA0 
                       MMU_LEVEL_2_TABLE
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xA0 
                                                            ;; Address of MMU l
                                                            evel 2 vector table



ARM Macro Assembler    Page 13 


                                                            .
  109 00000000 80000CA4 
                       MMU_LEVEL_2_TABLE_SIZE
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xA4 
                                                            ;; Size of MMU leve
                                                            l 2 vector table.
  110 00000000 80000CA8 
                       NOT_USED1
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xA8 
                                                            ;; Address of MMU c
                                                            ache disable buffer
                                                             (no longer
  111 00000000         ;; needed, but removing it now will cause boot /
  112 00000000         ;; application code compatibility problems).
  113 00000000 80000CAC 
                       NOT_USED2
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xAC 
                                                            ;; Size of MMU cach
                                                            e disable buffer (n
                                                            o longer
  114 00000000         ;; needed, but removing it now will cause boot /
  115 00000000         ;; application code compatibility problems).
  116 00000000 80000CB0 
                       SVC_STACK
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xB0 
                                                            ;; Address of SVC s
                                                            tack top.
  117 00000000 80000CB4 
                       ABT_STACK
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xB4 
                                                            ;; Address of ABT s
                                                            tack base.
  118 00000000 80000CB8 
                       UNDEF_STACK
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xB8 
                                                            ;; Address of UNDEF
                                                             stack base.
  119 00000000 80000CBC 
                       IRQ_STACK
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xBC 
                                                            ;; Address of IQR s
                                                            tack base.
  120 00000000 80000CC0 
                       FIQ_STACK
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xC0 
                                                            ;; Address of FIQ s
                                                            tack base.
  121 00000000 80000CC4 
                       SYS_STACK
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xC4 
                                                            ;; Address of SYS s
                                                            tack base.
  122 00000000         
  123 00000000 80000CC8 
                       BOOT_TO_APP_REQUEST
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xC8 
                                                            ;; Reserved space t
                                                            o pass a request fr
                                                            om boot to app.



ARM Macro Assembler    Page 14 


  124 00000000         
  125 00000000 80000CCC 
                       DCMP_HEAP_START
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xCC
  126 00000000 80000CD0 
                       DCMP_HEAP_END
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xD0
  127 00000000 80000CD4 
                       DCMP_APP_IMAGE_RO_BASE
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xD4
  128 00000000 80000CD8 
                       DCMP_APP_IMAGE_RO_END
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xD8
  129 00000000 80000CDC 
                       DCMP_APP_IMAGE_RW_BASE
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xDC
  130 00000000 80000CE0 
                       DCMP_APP_IMAGE_RW_END
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xE0
  131 00000000 80000CE4 
                       DCMP_APP_IMAGE_ZI_BASE
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xE4
  132 00000000 80000CE8 
                       DCMP_APP_IMAGE_ZI_END
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xE8
  133 00000000         
  134 00000000 80000CEC 
                       SHARED_TABLE_FLASHTYPE
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xEC 
                                                            ;; flash type
  135 00000000 80000CF0 
                       DEVICE_TYPE_ST
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xF0 
                                                            ;; device type
  136 00000000         
  137 00000000 80000CF0 
                       SHARED_TABLE_LAST_ENTRY_S
                               EQU              ACTUAL_TABLE_LOCATION_S + 0xF0 
                                                            ;; primitive copy o
                                                            f end of struct/tab
                                                            le
  138 00000000         
  139 00000000                 END
  320 00000000         
  321 00000000         
  322 00000000                 END
   14 00000000                 INCLUDE          db_hdw.s    ; Definitions of SA
                                                            -11x0 registers and
                                                             bit settings
    1 00000000         ;;
    2 00000000         ;    Code attempting to build from scratch assembly nece
                       ssary internal regs for Dragonball processor
    3 00000000         ;;
    4 00000000         ;;
    5 00000000         ;;======================================================
                       ================================
    6 00000000         ;; Revision information
    7 00000000         ;;======================================================
                       ================================



ARM Macro Assembler    Page 15 


    8 00000000         ;; $RCSfile: db_shared/db_hdw.s $
    9 00000000         ;; $Revision: 1.3.3.29 $
   10 00000000         ;; $Date: 2009/01/22 11:52:55EST $
   11 00000000         ;;======================================================
                       ================================
   12 00000000         
   13 00000000         ;;
   14 00000000         ;;Define flag to allow memory tests to run
   15 00000000         ;;
   16 00000000                 GBLL             MEMORY_DEBUG
   17 00000000 FALSE    
                       MEMORY_DEBUG
                               SETL             {FALSE}
   18 00000000         ;MEMORY_DEBUG SETL {TRUE}
   19 00000000         
   20 00000000         ;;
   21 00000000         ;;Define flag to allow for DDR memory width for use in c
                       onfiguration
   22 00000000         ;;
   23 00000000         ;;GBLL  Eval_Bd_with_MEMORY_32W
   24 00000000         ;;Eval_Bd_with_MEMORY_32W  SETL {TRUE}
   25 00000000         ;;Eval_Bd_with_MEMORY_32W  SETL {FALSE}
   26 00000000         
   27 00000000         ;;
   28 00000000         ;;This is set by assembler build options in "Mks_project
                       _target_foundations.mk"
   29 00000000         ;;
   30 00000000         ;;GBLS    platform_current
   31 00000000         ;;platform_current SETS "mxl"  ;;"mxl"
   32 00000000         ;;platform_current SETS "imx27"  ;;"imx27"
   33 00000000         ;;platform_current SETS "imx25"  ;;"imx25"
   34 00000000         ;;
   35 00000000         ;;
   36 00000000         ;;This is set by assembler build options in "Mks_project
                       _target_foundations.mk"
   37 00000000         ;;
   38 00000000         ;;GBLS    Board_TARGET
   39 00000000         ;;Board_TARGET SETS "MXL_Matrix"   ;;MXL Matrix Board (G
                       EN 5)
   40 00000000         ;;Board_TARGET SETS "iMX27_Development"  ;;Logic PD Deve
                       lopment Board For iMX27
   41 00000000         ;;Board_TARGET SETS "iMX27_FF1"    ;;Form Factor Board f
                       or iMX27
   42 00000000         ;;Board_TARGET SETS "iMX25_Development"  ;;Development B
                       oard For iMX25 (plugs into Logic PD board)
   43 00000000         ;;Board_TARGET SETS "iMX25_Gen6_Board"  ;;Cordless/Corde
                       d Form Factor Boards for iMX25
   44 00000000         ;;Board_TARGET SETS "iMX25_Trace"   ;;Form Factor Board 
                       for iMX25 with Trace Lines initilized
   45 00000000         
   46 00000000         
   47 00000000         
   48 00000000         ;; ARM Program Status Register
   49 00000000         ;; 31  30  29  28  27  .........  7   6   5  4  3  2  1 
                        0
   50 00000000         ;; -----------------------------------------------------
                       -----
   51 00000000         ;; | N | Z | C | V | Q |         | I | F | T |   M4 - M0
                           |



ARM Macro Assembler    Page 16 


   52 00000000         ;; -----------------------------------------------------
                       -----
   53 00000000         ;;
   54 00000000         ;; #########################################
   55 00000000         ;; # ARM INTERRUPTS                        #
   56 00000000         ;; #########################################
   57 00000000 000000C0 
                       INTERRUPT_BITS
                               EQU              0xC0
   58 00000000 00000040 
                       DISABLE_FIQ
                               EQU              0x40
   59 00000000 00000080 
                       DISABLE_IRQ
                               EQU              0x80
   60 00000000         ;;
   61 00000000         ;;Setup for the status register control bits, can only b
                       e changed on a privilaged mode
   62 00000000         ;;
   63 00000000 00000080 
                       I_Bit   EQU              0x80        ;;disables IRQ inte
                                                            rupts when set
   64 00000000 00000040 
                       F_Bit   EQU              0x40        ;;disables FIQ inte
                                                            rupts when set
   65 00000000         
   66 00000000         ;;
   67 00000000         ;; #########################################
   68 00000000         ;; # ARM MODES = {M4, M3, M2, M1, M0}      #
   69 00000000         ;; #########################################
   70 00000000         ;;
   71 00000000         ;; The M_bits for status register
   72 00000000         ;;
   73 00000000         ;; Some standard ARM v4T definitions, assuming for the m
                       oment none of this changes from StrongArm's implementati
                       on.
   74 00000000         ;; Current program status register (CSPR) bits.
   75 00000000         ;; Bits [4:0] are used to define the processor modes as 
                       detailed below.
   76 00000000         ;;
   77 00000000 00000010 
                       Mode_USR
                               EQU              0x10        ;;User mode
   78 00000000 00000011 
                       Mode_FIQ
                               EQU              0x11        ;;FIQ - fast interu
                                                            pt request,  a priv
                                                            ilaged mode
   79 00000000 00000012 
                       Mode_IRQ
                               EQU              0x12        ;;IRQ - interupt re
                                                            quest,  a privilage
                                                            d mode
   80 00000000 00000013 
                       Mode_SVC
                               EQU              0x13        ;;Supervisor,  a pr
                                                            ivilaged mode
   81 00000000 00000017 
                       Mode_ABT



ARM Macro Assembler    Page 17 


                               EQU              0x17        ;;Abort,  a privila
                                                            ged mode
   82 00000000 0000001B 
                       Mode_UNDEF
                               EQU              0x1B        ;;Undefined,  a pri
                                                            vilaged mode
   83 00000000 0000001F 
                       Mode_SYS
                               EQU              0x1F        ;;System,  a privil
                                                            aged mode , only av
                                                            ailable on ARM Arch
                                                            . v4 and above
   84 00000000 00000016 
                       Mode_MON
                               EQU              0x16        ;;Security Extensio
                                                            ns only , only avai
                                                            lable on ARM Arch. 
                                                            v6 and above
   85 00000000         
   86 00000000         ;;
   87 00000000         ;; #########################################
   88 00000000         ;; # ARM CONDITION CODE FLAG = {N,Z,C,V,Q} #
   89 00000000         ;; #########################################
   90 00000000 F8000000 
                       FLAG_BITS
                               EQU              0xF8000000
   91 00000000 80000000 
                       NFLAG   EQU              0x80000000
   92 00000000 40000000 
                       ZFLAG   EQU              0x40000000
   93 00000000 20000000 
                       CFLAG   EQU              0x20000000
   94 00000000 10000000 
                       VFLAG   EQU              0x10000000
   95 00000000 08000000 
                       QFLAG   EQU              0x08000000
   96 00000000         
   97 00000000         
   98 00000000         ;;
   99 00000000         ;;Platform Check
  100 00000000         ;;******************************************************
                       *******************
  101 00000000         
  102 00000000                 IF               platform_current = "imx25"
  103 00000000                 INCLUDE          iMX25_hdw.i
    1 00000000         ;*******************************************************
                       ********************************/
    2 00000000         ;*
    3 00000000         ;* HSM 48X0G GENERATION 6 SOFTWARE
    4 00000000         ;*
    5 00000000         ;*  HARDWARE MACROS 
    6 00000000         ;*  Date:       9/29/2008
    7 00000000         ;*  Tools:      RVCT Build 674
    8 00000000         ;*  Target:     Freescale iMX25
    9 00000000         ;*
   10 00000000         ;*======================================================
                       ================================
   11 00000000         ;* Revision information
   12 00000000         ;*======================================================



ARM Macro Assembler    Page 18 


                       ================================
   13 00000000         ;* $RCSfile: db_shared/Hardware_Header_Files/iMX25/iMX25
                       _hdw.i $
   14 00000000         ;* $Revision: 1.30 $
   15 00000000         ;* $Date: 2010/12/20 14:15:29EST $
   16 00000000         ;*======================================================
                       ================================
   17 00000000         ;*------------------------------------------------------
                       ------------------------
   18 00000000         ;* Header:  iMX25_hdw.i
   19 00000000         ;*
   20 00000000         ;* This File defines the iMX25 ASM Hardware
   21 00000000         ;*
   22 00000000         ;*------------------------------------------------------
                       ------------------------  
   23 00000000         
   24 00000000         ;; #########################################
   25 00000000         ;; # AIPS1        #
   26 00000000         ;; #########################################
   27 00000000 43F00000 
                       AIPS1_BASE_ADDR
                               EQU              0x43F00000
   28 00000000 43F00000 
                       AIPS1_MPROT0_7
                               EQU              (AIPS1_BASE_ADDR+0x00) ;; Maste
                                                            r Privilege Reg 0-7
                                                            
   29 00000000 43F00004 
                       AIPS1_MPROT8_15
                               EQU              (AIPS1_BASE_ADDR+0x04) ;; Maste
                                                            r Privilege Reg 8-1
                                                            5
   30 00000000 43F00020 
                       AIPS1_PACR0_7
                               EQU              (AIPS1_BASE_ADDR+0x20) ;; Perip
                                                            heral Access Contro
                                                            l Reg 0-7
   31 00000000 43F00024 
                       AIPS1_PACR8_15
                               EQU              (AIPS1_BASE_ADDR+0x24) ;; Perip
                                                            heral Access Contro
                                                            l Reg 8-15
   32 00000000 43F00028 
                       AIPS1_PACR16_23
                               EQU              (AIPS1_BASE_ADDR+0x28) ;; Perip
                                                            heral Access Contro
                                                            l Reg 16-23
   33 00000000 43F0002C 
                       AIPS1_PACR24_31
                               EQU              (AIPS1_BASE_ADDR+0x2C) ;; Perip
                                                            heral Access Contro
                                                            l Reg 24-32
   34 00000000 43F00040 
                       AIPS1_OPACR0_7
                               EQU              (AIPS1_BASE_ADDR+0x40) ;; Off-P
                                                            latform Peri Access
                                                             Ctl Reg 0-7
   35 00000000 43F00044 
                       AIPS1_OPACR8_15



ARM Macro Assembler    Page 19 


                               EQU              (AIPS1_BASE_ADDR+0x44) ;; Off-P
                                                            latform Peri Access
                                                             Ctl Reg 8-15
   36 00000000 43F00048 
                       AIPS1_OPACR16_23
                               EQU              (AIPS1_BASE_ADDR+0x48) ;; Off-P
                                                            latform Peri Access
                                                             Ctl Reg 16-23
   37 00000000 43F0004C 
                       AIPS1_OPACR24_31
                               EQU              (AIPS1_BASE_ADDR+0x4C) ;; Off-P
                                                            latform Peri Access
                                                             Ctl Reg 24-31
   38 00000000 43F00050 
                       AIPS1_OPACR32_33
                               EQU              (AIPS1_BASE_ADDR+0x50) ;; Off-P
                                                            latform Peri Access
                                                             Ctl Reg 32-33
   39 00000000         
   40 00000000 77777777 
                       AIPS1_MPROT0_7_Setting
                               EQU              0x77777777  ;; Master Privilege
                                                             Reg 0-7
   41 00000000 77777777 
                       AIPS1_MPROT8_15_Setting
                               EQU              0x77777777  ;; Master Privilege
                                                             Reg 8-15
   42 00000000 00000000 
                       AIPS1_PACR0_7_Setting
                               EQU              0x00000000  ;; Peripheral Acces
                                                            s Control Reg 0-7
   43 00000000 00000000 
                       AIPS1_PACR8_15_Setting
                               EQU              0x00000000  ;; Peripheral Acces
                                                            s Control Reg 8-15
   44 00000000 00000000 
                       AIPS1_PACR16_23_Setting
                               EQU              0x00000000  ;; Peripheral Acces
                                                            s Control Reg 16-23
                                                            
   45 00000000 00000000 
                       AIPS1_PACR24_31_Setting
                               EQU              0x00000000  ;; Peripheral Acces
                                                            s Control Reg 24-32
                                                            
   46 00000000 00000000 
                       AIPS1_OPACR0_7_Setting
                               EQU              0x00000000  ;; Off-Platform Per
                                                            i Access Ctl Reg 0-
                                                            7
   47 00000000 00000000 
                       AIPS1_OPACR8_15_Setting
                               EQU              0x00000000  ;; Off-Platform Per
                                                            i Access Ctl Reg 8-
                                                            15
   48 00000000 00000000 
                       AIPS1_OPACR16_23_Setting
                               EQU              0x00000000  ;; Off-Platform Per
                                                            i Access Ctl Reg 16



ARM Macro Assembler    Page 20 


                                                            -23
   49 00000000 00000000 
                       AIPS1_OPACR24_31_Setting
                               EQU              0x00000000  ;; Off-Platform Per
                                                            i Access Ctl Reg 24
                                                            -31
   50 00000000 00000000 
                       AIPS1_OPACR32_33_Setting
                               EQU              0x00000000  ;; Off-Platform Per
                                                            i Access Ctl Reg 32
                                                            -33
   51 00000000 00000000 
                       AIPS1_ZERO_Setting
                               EQU              0x00000000  ;; Zero Value
   52 00000000         
   53 00000000         
   54 00000000         ;; #########################################
   55 00000000         ;; # AIPS2        #
   56 00000000         ;; #########################################
   57 00000000 53F00000 
                       AIPS2_BASE_ADDR
                               EQU              0x53F00000
   58 00000000 53F00000 
                       AIPS2_MPROT0_7
                               EQU              (AIPS2_BASE_ADDR+0x00) ;; Maste
                                                            r Privilege Reg 0-7
                                                            
   59 00000000 53F00004 
                       AIPS2_MPROT8_15
                               EQU              (AIPS2_BASE_ADDR+0x04) ;; Maste
                                                            r Privilege Reg 8-1
                                                            5
   60 00000000 53F00020 
                       AIPS2_PACR0_7
                               EQU              (AIPS2_BASE_ADDR+0x20) ;; Perip
                                                            heral Access Contro
                                                            l Reg 0-7
   61 00000000 53F00024 
                       AIPS2_PACR8_15
                               EQU              (AIPS2_BASE_ADDR+0x24) ;; Perip
                                                            heral Access Contro
                                                            l Reg 8-15
   62 00000000 53F00028 
                       AIPS2_PACR16_23
                               EQU              (AIPS2_BASE_ADDR+0x28) ;; Perip
                                                            heral Access Contro
                                                            l Reg 16-23
   63 00000000 53F0002C 
                       AIPS2_PACR24_31
                               EQU              (AIPS2_BASE_ADDR+0x2C) ;; Perip
                                                            heral Access Contro
                                                            l Reg 24-32
   64 00000000 53F00040 
                       AIPS2_OPACR0_7
                               EQU              (AIPS2_BASE_ADDR+0x40) ;; Off-P
                                                            latform Peri Access
                                                             Ctl Reg 0-7
   65 00000000 53F00044 
                       AIPS2_OPACR8_15



ARM Macro Assembler    Page 21 


                               EQU              (AIPS2_BASE_ADDR+0x44) ;; Off-P
                                                            latform Peri Access
                                                             Ctl Reg 8-15
   66 00000000 53F00048 
                       AIPS2_OPACR16_23
                               EQU              (AIPS2_BASE_ADDR+0x48) ;; Off-P
                                                            latform Peri Access
                                                             Ctl Reg 16-23
   67 00000000 53F0004C 
                       AIPS2_OPACR24_31
                               EQU              (AIPS2_BASE_ADDR+0x4C) ;; Off-P
                                                            latform Peri Access
                                                             Ctl Reg 24-31
   68 00000000 53F00050 
                       AIPS2_OPACR32_33
                               EQU              (AIPS2_BASE_ADDR+0x50) ;; Off-P
                                                            latform Peri Access
                                                             Ctl Reg 32-33
   69 00000000         
   70 00000000 77777777 
                       AIPS2_MPROT0_7_Setting
                               EQU              0x77777777  ;; Master Privilege
                                                             Reg 0-7
   71 00000000 77777777 
                       AIPS2_MPROT8_15_Setting
                               EQU              0x77777777  ;; Master Privilege
                                                             Reg 8-15
   72 00000000 00000000 
                       AIPS2_PACR0_7_Setting
                               EQU              0x00000000  ;; Peripheral Acces
                                                            s Control Reg 0-7
   73 00000000 00000000 
                       AIPS2_PACR8_15_Setting
                               EQU              0x00000000  ;; Peripheral Acces
                                                            s Control Reg 8-15
   74 00000000 00000000 
                       AIPS2_PACR16_23_Setting
                               EQU              0x00000000  ;; Peripheral Acces
                                                            s Control Reg 16-23
                                                            
   75 00000000 00000000 
                       AIPS2_PACR24_31_Setting
                               EQU              0x00000000  ;; Peripheral Acces
                                                            s Control Reg 24-32
                                                            
   76 00000000 00000000 
                       AIPS2_OPACR0_7_Setting
                               EQU              0x00000000  ;; Off-Platform Per
                                                            i Access Ctl Reg 0-
                                                            7
   77 00000000 00000000 
                       AIPS2_OPACR8_15_Setting
                               EQU              0x00000000  ;; Off-Platform Per
                                                            i Access Ctl Reg 8-
                                                            15
   78 00000000 00000000 
                       AIPS2_OPACR16_23_Setting
                               EQU              0x00000000  ;; Off-Platform Per
                                                            i Access Ctl Reg 16



ARM Macro Assembler    Page 22 


                                                            -23
   79 00000000 00000000 
                       AIPS2_OPACR24_31_Setting
                               EQU              0x00000000  ;; Off-Platform Per
                                                            i Access Ctl Reg 24
                                                            -31
   80 00000000 00000000 
                       AIPS2_OPACR32_33_Setting
                               EQU              0x00000000  ;; Off-Platform Per
                                                            i Access Ctl Reg 32
                                                            -33
   81 00000000 00000000 
                       AIPS2_ZERO_Setting
                               EQU              0x00000000  ;; Zero Value
   82 00000000         
   83 00000000         ;; #########################################
   84 00000000         ;; # ASIC        #
   85 00000000         ;; #########################################
   86 00000000 68000000 
                       ASIC_BASE_ADDR
                               EQU              0x68000000
   87 00000000 68000000 
                       ASIC_INTCNTL
                               EQU              (ASIC_BASE_ADDR+0x00) ;; 32bit 
                                                            ASIC int control re
                                                            g
   88 00000000 68000004 
                       ASIC_NIMASK
                               EQU              (ASIC_BASE_ADDR+0x04) ;; 32bit 
                                                            ASIC int mask reg
   89 00000000 68000008 
                       ASIC_INTENNUM
                               EQU              (ASIC_BASE_ADDR+0x08) ;; 32bit 
                                                            ASIC int enable num
                                                            ber reg
   90 00000000 6800000C 
                       ASIC_INTDISNUM
                               EQU              (ASIC_BASE_ADDR+0x0C) ;; 32bit 
                                                            ASIC int disable nu
                                                            mber reg
   91 00000000 68000010 
                       ASIC_INTENABLEH
                               EQU              (ASIC_BASE_ADDR+0x10) ;; 32bit 
                                                            ASIC int enable reg
                                                             high
   92 00000000 68000014 
                       ASIC_INTENABLEL
                               EQU              (ASIC_BASE_ADDR+0x14) ;; 32bit 
                                                            ASIC int enable reg
                                                             low
   93 00000000 68000018 
                       ASIC_INTTYPEH
                               EQU              (ASIC_BASE_ADDR+0x18) ;; 32bit 
                                                            ASIC int type reg h
                                                            igh
   94 00000000 6800001C 
                       ASIC_INTTYPEL
                               EQU              (ASIC_BASE_ADDR+0x1C) ;; 32bit 
                                                            ASIC int type reg l



ARM Macro Assembler    Page 23 


                                                            ow
   95 00000000 68000020 
                       ASIC_NIPRIORITY7
                               EQU              (ASIC_BASE_ADDR+0x20) ;; 32bit 
                                                            ASIC norm int prior
                                                            ity lvl7
   96 00000000 68000024 
                       ASIC_NIPRIORITY6
                               EQU              (ASIC_BASE_ADDR+0x24) ;; 32bit 
                                                            ASIC norm int prior
                                                            ity lvl6
   97 00000000 68000028 
                       ASIC_NIPRIORITY5
                               EQU              (ASIC_BASE_ADDR+0x28) ;; 32bit 
                                                            ASIC norm int prior
                                                            ity lvl5
   98 00000000 6800002C 
                       ASIC_NIPRIORITY4
                               EQU              (ASIC_BASE_ADDR+0x2C) ;; 32bit 
                                                            ASIC norm int prior
                                                            ity lvl4
   99 00000000 68000030 
                       ASIC_NIPRIORITY3
                               EQU              (ASIC_BASE_ADDR+0x30) ;; 32bit 
                                                            ASIC norm int prior
                                                            ity lvl3
  100 00000000 68000034 
                       ASIC_NIPRIORITY2
                               EQU              (ASIC_BASE_ADDR+0x34) ;; 32bit 
                                                            ASIC norm int prior
                                                            ity lvl2
  101 00000000 68000038 
                       ASIC_NIPRIORITY1
                               EQU              (ASIC_BASE_ADDR+0x38) ;; 32bit 
                                                            ASIC norm int prior
                                                            ity lvl1
  102 00000000 6800003C 
                       ASIC_NIPRIORITY0
                               EQU              (ASIC_BASE_ADDR+0x3C) ;; 32bit 
                                                            ASIC norm int prior
                                                            ity lvl0
  103 00000000 68000040 
                       ASIC_NIVECSR
                               EQU              (ASIC_BASE_ADDR+0x40) ;; 32bit 
                                                            ASIC norm int vecto
                                                            r/status
  104 00000000 68000044 
                       ASIC_FIVECSR
                               EQU              (ASIC_BASE_ADDR+0x44) ;; 32bit 
                                                            ASIC fast int vecto
                                                            r/status
  105 00000000 68000048 
                       ASIC_INTSRCH
                               EQU              (ASIC_BASE_ADDR+0x48) ;; 32bit 
                                                            ASIC int source reg
                                                             high
  106 00000000 6800004C 
                       ASIC_INTSRCL
                               EQU              (ASIC_BASE_ADDR+0x4C) ;; 32bit 



ARM Macro Assembler    Page 24 


                                                            ASIC int source reg
                                                             low
  107 00000000 68000050 
                       ASIC_INTFRCH
                               EQU              (ASIC_BASE_ADDR+0x50) ;; 32bit 
                                                            ASIC int force reg 
                                                            high
  108 00000000 68000054 
                       ASIC_INTFRCL
                               EQU              (ASIC_BASE_ADDR+0x54) ;; 32bit 
                                                            ASIC int force reg 
                                                            low
  109 00000000 68000058 
                       ASIC_NIPNDH
                               EQU              (ASIC_BASE_ADDR+0x58) ;; 32bit 
                                                            ASIC norm int pendi
                                                            ng high
  110 00000000 6800005C 
                       ASIC_NIPNDL
                               EQU              (ASIC_BASE_ADDR+0x5C) ;; 32bit 
                                                            ASIC norm int pendi
                                                            ng low
  111 00000000 68000060 
                       ASIC_FIPNDH
                               EQU              (ASIC_BASE_ADDR+0x60) ;; 32bit 
                                                            ASIC fast int pendi
                                                            ng high
  112 00000000 68000064 
                       ASIC_FIPNDL
                               EQU              (ASIC_BASE_ADDR+0x64) ;; 32bit 
                                                            ASIC fast int pendi
                                                            ng low
  113 00000000         
  114 00000000         ;;AITC name conversion table
  115 00000000         ;; mxl has the following nomenclature, so to ease the co
                       nversion of manual to platform naming convention, redund
                       antly re-define pin names.
  116 00000000         ;;
  117 00000000 68000040 
                       NIVESCR EQU              ASIC_NIVECSR ;;NIVECSR - Normal
                                                             Interrupt Vector a
                                                            nd Status Register
  118 00000000 68000044 
                       FIVESCR EQU              ASIC_FIVECSR ;;FIVECSR - Fast I
                                                            nterrupt Vector and
                                                             Status Register
  119 00000000         ;; to avoid literal pool entering the game -- not even s
                       ure what the time/other implications are, but...
  120 00000000 68000000 
                       BASE_INT_REG
                               EQU              0x68000000  ;;Upper half of reg
                                                            ister base address
  121 00000000 00000000 
                       AITC_OFFSET
                               EQU              0x00000000  ;;Lower half of reg
                                                            ister base address
  122 00000000 00000040 
                       NIVESCR_REG_OFFSET
                               EQU              0x40        ;;offset for NIVECS



ARM Macro Assembler    Page 25 


                                                            R
  123 00000000 00000044 
                       FIVESCR_REG_OFFSET
                               EQU              0x44        ;;offset for FIVECS
                                                            R
  124 00000000         
  125 00000000         ;; #########################################
  126 00000000         ;; # CRM        #
  127 00000000         ;; # $53F8_0000 to $53F8_3FFF     #
  128 00000000         ;; #########################################
  129 00000000 53F80000 
                       CRM_BASE_ADDR
                               EQU              0x53F80000
  130 00000000 53F80000 
                       CRM_MPCTL
                               EQU              (CRM_BASE_ADDR+0x00) ;; MCU PLL
                                                             Control Register
  131 00000000 53F80004 
                       CRM_UPCTL
                               EQU              (CRM_BASE_ADDR+0x04) ;; USB PLL
                                                             Control Register
  132 00000000 53F80008 
                       CRM_CCTL
                               EQU              (CRM_BASE_ADDR+0x08) ;; Clock C
                                                            ontrol Register
  133 00000000 53F8000C 
                       CRM_CGR0
                               EQU              (CRM_BASE_ADDR+0x0C) ;; Clock G
                                                            ating Register 0
  134 00000000 53F80010 
                       CRM_CGR1
                               EQU              (CRM_BASE_ADDR+0x10) ;; Clock G
                                                            ating Register 1
  135 00000000 53F80014 
                       CRM_CGR2
                               EQU              (CRM_BASE_ADDR+0x14) ;; Clock G
                                                            ating Register 2
  136 00000000 53F80018 
                       CRM_PDR0
                               EQU              (CRM_BASE_ADDR+0x18) ;; perclk 
                                                            Divider Register 0
  137 00000000 53F8001C 
                       CRM_PDR1
                               EQU              (CRM_BASE_ADDR+0x1C) ;; perclk 
                                                            Divider Register 1
  138 00000000 53F80020 
                       CRM_PDR2
                               EQU              (CRM_BASE_ADDR+0x20) ;; perclk 
                                                            Divider Register 2
  139 00000000 53F80024 
                       CRM_PDR3
                               EQU              (CRM_BASE_ADDR+0x24) ;; perclk 
                                                            Divider Register 3
  140 00000000 53F80028 
                       CRM_CRSR
                               EQU              (CRM_BASE_ADDR+0x28) ;; CRM Sta
                                                            tus Register
  141 00000000 53F8002C 
                       CRM_CRDR



ARM Macro Assembler    Page 26 


                               EQU              (CRM_BASE_ADDR+0x2C) ;; CRM Deb
                                                            ug Register
  142 00000000 53F80030 
                       CRM_DCVR0
                               EQU              (CRM_BASE_ADDR+0x30) ;; DPTC Co
                                                            mparator Value Regi
                                                            ster 0
  143 00000000 53F80034 
                       CRM_DCVR1
                               EQU              (CRM_BASE_ADDR+0x34) ;; DPTC Co
                                                            mparator Value Regi
                                                            ster 1
  144 00000000 53F80038 
                       CRM_DCVR2
                               EQU              (CRM_BASE_ADDR+0x38) ;; DPTC Co
                                                            mparator Value Regi
                                                            ster 2
  145 00000000 53F8003C 
                       CRM_DCVR3
                               EQU              (CRM_BASE_ADDR+0x3C) ;; DPTC Co
                                                            mparator Value Regi
                                                            ster 3
  146 00000000 53F80040 
                       CRM_LTR0
                               EQU              (CRM_BASE_ADDR+0x40) ;; Load Tr
                                                            acking Register 0
  147 00000000 53F80044 
                       CRM_LTR1
                               EQU              (CRM_BASE_ADDR+0x44) ;; Load Tr
                                                            acking Register 1
  148 00000000 53F80048 
                       CRM_LTR2
                               EQU              (CRM_BASE_ADDR+0x48) ;; Load Tr
                                                            acking Register 2
  149 00000000 53F8004C 
                       CRM_LTR3
                               EQU              (CRM_BASE_ADDR+0x4C) ;; Load Tr
                                                            acking Register 3
  150 00000000 53F80050 
                       CRM_LTBR0
                               EQU              (CRM_BASE_ADDR+0x50) ;; Load Tr
                                                            acking Buffer Regis
                                                            ter 0
  151 00000000 53F80054 
                       CRM_LTBR1
                               EQU              (CRM_BASE_ADDR+0x54) ;; Load Tr
                                                            acking Buffer Regis
                                                            ter 1
  152 00000000 53F80058 
                       CRM_PMCR0
                               EQU              (CRM_BASE_ADDR+0x58) ;; Power M
                                                            anagement Control R
                                                            egister 0
  153 00000000 53F8005C 
                       CRM_PMCR1
                               EQU              (CRM_BASE_ADDR+0x5C) ;; Power M
                                                            anagement Control R
                                                            egister 1
  154 00000000 53F80060 



ARM Macro Assembler    Page 27 


                       CRM_PMCR2
                               EQU              (CRM_BASE_ADDR+0x60) ;; Power M
                                                            anagement Control R
                                                            egister 2
  155 00000000 53F80064 
                       CRM_MCR EQU              (CRM_BASE_ADDR+0x64) ;; CRM Mis
                                                            c Control Register
  156 00000000         
  157 00000000         ;;Bit Masks
  158 00000000         ;;
  159 00000000         ;;Settings were generated from Excel Doc "ds018_iMX25_Cl
                       ock_Calculator.xls"
  160 00000000 00008000 
                       CRM_MPCTL1_MASK_LOCK
                               EQU              0x00008000  ;;CRM - MPCTL1 MASK
                                                             for determing if t
                                                            he MPLL has locked 
                                                            in the new frequenc
                                                            y
  161 00000000 800B2C01 
                       CRM_MPCTL_SETTING
                               EQU              0x800B2C01
  162 00000000 84002800 
                       CRM_UPCTL_SETTING
                               EQU              0x84002800
  163 00000000 20004000 
                       CRM_CCTL_SETTING
                               EQU              0x20004000
  164 00000000 00088020 
                       CRM_CGR0_SETTING
                               EQU              0x00088020
  165 00000000 080F0040 
                       CRM_CGR1_SETTING
                               EQU              0x080F0040
  166 00000000 00084000 
                       CRM_CGR2_SETTING
                               EQU              0x00084000
  167 00000000 00000000 
                       CRM_PDR0_SETTING
                               EQU              0x00000000
  168 00000000 00000300 
                       CRM_PDR1_SETTING
                               EQU              0x00000300
  169 00000000 00000000 
                       CRM_PDR2_SETTING
                               EQU              0x00000000
  170 00000000 02000000 
                       CRM_PDR3_SETTING
                               EQU              0x02000000
  171 00000000 00000000 
                       CRM_MCR_SETTING
                               EQU              0x00000000
  172 00000000 28004000 
                       CRM_MPLL_RST
                               EQU              0x28004000
  173 00000000 24004000 
                       CRM_UPLL_RST
                               EQU              0x24004000
  174 00000000         



ARM Macro Assembler    Page 28 


  175 00000000         ;;CLOCK name conversion table
  176 00000000         ;; mx27 has the following nomenclature, so to ease the c
                       onversion of manual to platform naming convention, redun
                       dantly re-define pin names.
  177 00000000         ;;
  178 00000000 53F80000 
                       CLOCK_BASE
                               EQU              CRM_BASE_ADDR
  179 00000000 53F80000 
                       MPCTL0  EQU              CRM_MPCTL
  180 00000000 800B2C01 
                       MPCTL0_SETTING
                               EQU              CRM_MPCTL_SETTING
  181 00000000 53F80024 
                       PCDR    EQU              CRM_PDR3    ;;UART1 setup on PE
                                                            R15
  182 00000000 02000000 
                       PCDR_SETTINGS
                               EQU              CRM_PDR3_SETTING
  183 00000000         
  184 00000000         
  185 00000000         ;; #########################################
  186 00000000         ;; # ESDCTL       #
  187 00000000         ;; #########################################
  188 00000000 00000000 
                       ESDCTL0_OFFSET
                               EQU              (0x00)
  189 00000000 00000004 
                       ESDCFG0_OFFSET
                               EQU              (0x04)
  190 00000000 00000008 
                       ESDCTL1_OFFSET
                               EQU              (0x08)
  191 00000000 0000000C 
                       ESDCFG1_OFFSET
                               EQU              (0x0C)
  192 00000000 00000010 
                       ESDMISC_OFFSET
                               EQU              (0x10)
  193 00000000         
  194 00000000 B8001000 
                       ESDCTL_BASE_ADDR
                               EQU              0xB8001000
  195 00000000 B8001000 
                       ESD_ESDCTL0
                               EQU              (ESDCTL_BASE_ADDR+ESDCTL0_OFFSE
T)
  196 00000000 B8001004 
                       ESD_ESDCFG0
                               EQU              (ESDCTL_BASE_ADDR+ESDCFG0_OFFSE
T)
  197 00000000 B8001008 
                       ESD_ESDCTL1
                               EQU              (ESDCTL_BASE_ADDR+ESDCTL1_OFFSE
T)
  198 00000000 B800100C 
                       ESD_ESDCFG1
                               EQU              (ESDCTL_BASE_ADDR+ESDCFG1_OFFSE
T)



ARM Macro Assembler    Page 29 


  199 00000000 B8001010 
                       ESD_ESDMISC
                               EQU              (ESDCTL_BASE_ADDR+ESDMISC_OFFSE
T)
  200 00000000 B8001020 
                       CONFIG_DATA_MDDR1
                               EQU              (ESDCTL_BASE_ADDR+0x20)
  201 00000000 B8001024 
                       CONFIG_DATA_MDDR2
                               EQU              (ESDCTL_BASE_ADDR+0x24)
  202 00000000 B8001028 
                       CONFIG_DATA_MDDR3
                               EQU              (ESDCTL_BASE_ADDR+0x28)
  203 00000000 B800102C 
                       CONFIG_DATA_MDDR4
                               EQU              (ESDCTL_BASE_ADDR+0x2C)
  204 00000000 B8001030 
                       CONFIG_DATA_MDDR5
                               EQU              (ESDCTL_BASE_ADDR+0x30)
  205 00000000 B8001034 
                       DEL_CYCL_LEN_MDDR
                               EQU              (ESDCTL_BASE_ADDR+0x34)
  206 00000000 B8001038 
                       CONFIG_DATA_MDDR6
                               EQU              (ESDCTL_BASE_ADDR+0x38)
  207 00000000         
  208 00000000 00000004 
                       ESDMISC_VAL1
                               EQU              0x00000004  ;; MISC Register, n
                                                            ormal settings (ddr
                                                             enabled)
  209 00000000 0000000C 
                       ESDMISC_VAL2
                               EQU              0x0000000C  ;; MISC Register, r
                                                            eset delay line wit
                                                            h ddr enabled
  210 00000000 00000008 
                       ESDMISC_VAL3
                               EQU              0x00000008  ;; MISC Register, r
                                                            eset delay line wit
                                                            h ddr disabled
  211 00000000 80000000 
                       ESDMISC_VAL4
                               EQU              0x80000000  ;; MISC Register, c
                                                            heck for 200 uSec t
                                                            o be completed
  212 00000000 0000000D 
                       ESD_ESDMISC_RESET
                               EQU              0x0000000D  ;; MISC Register, R
                                                            eset
  213 00000000         
  214 00000000         ;; #########################################
  215 00000000         ;; # WEIM        #
  216 00000000         ;; #########################################
  217 00000000 B8002000 
                       WEIM_BASE_ADDR
                               EQU              0xB8002000
  218 00000000 B8002000 
                       WEIM_CS0U



ARM Macro Assembler    Page 30 


                               EQU              (WEIM_BASE_ADDR+0x00)
  219 00000000 B8002004 
                       WEIM_CS0L
                               EQU              (WEIM_BASE_ADDR+0x04)
  220 00000000 B8002008 
                       WEIM_CS0A
                               EQU              (WEIM_BASE_ADDR+0x08)
  221 00000000 B8002010 
                       WEIM_CS1U
                               EQU              (WEIM_BASE_ADDR+0x10)
  222 00000000 B8002014 
                       WEIM_CS1L
                               EQU              (WEIM_BASE_ADDR+0x14)
  223 00000000 B8002018 
                       WEIM_CS1A
                               EQU              (WEIM_BASE_ADDR+0x18)
  224 00000000 B8002020 
                       WEIM_CS2U
                               EQU              (WEIM_BASE_ADDR+0x20)
  225 00000000 B8002024 
                       WEIM_CS2L
                               EQU              (WEIM_BASE_ADDR+0x24)
  226 00000000 B8002028 
                       WEIM_CS2A
                               EQU              (WEIM_BASE_ADDR+0x28)
  227 00000000 B8002030 
                       WEIM_CS3U
                               EQU              (WEIM_BASE_ADDR+0x30)
  228 00000000 B8002034 
                       WEIM_CS3L
                               EQU              (WEIM_BASE_ADDR+0x34)
  229 00000000 B8002038 
                       WEIM_CS3A
                               EQU              (WEIM_BASE_ADDR+0x38)
  230 00000000 B8002040 
                       WEIM_CS4U
                               EQU              (WEIM_BASE_ADDR+0x40)
  231 00000000 B8002044 
                       WEIM_CS4L
                               EQU              (WEIM_BASE_ADDR+0x44)
  232 00000000 B8002048 
                       WEIM_CS4A
                               EQU              (WEIM_BASE_ADDR+0x48)
  233 00000000 B8002050 
                       WEIM_CS5U
                               EQU              (WEIM_BASE_ADDR+0x50)
  234 00000000 B8002054 
                       WEIM_CS5L
                               EQU              (WEIM_BASE_ADDR+0x54)
  235 00000000 B8002058 
                       WEIM_CS5A
                               EQU              (WEIM_BASE_ADDR+0x58)
  236 00000000 B8002060 
                       WEIM_EIM
                               EQU              (WEIM_BASE_ADDR+0x60)
  237 00000000         
  238 00000000         ;;CS0 NOR Flash name conversion table
  239 00000000         ;; mx27 has the following nomenclature, so to ease the c
                       onversion of manual to platform naming convention, redun



ARM Macro Assembler    Page 31 


                       dantly re-define pin names.
  240 00000000         ;;
  241 00000000 B8002000 
                       CS0U    EQU              WEIM_CS0U   ;; CS0 upper contro
                                                            l register
  242 00000000 B8002004 
                       CS0L    EQU              WEIM_CS0L   ;; CS0 lower contro
                                                            l register
  243 00000000 00001563 
                       APPWSCEQU1
                               EQU              0x00001563  ;; wait states = 16
                                                            , works for APP (13
                                                            3Mhz system Hclk, 7
                                                            0 ns Flash)
  244 00000000 76002D61 
                       APPWSCEQUL
                               EQU              0x76002d61  ;; 16 bit wide deas
                                                            sert cs 2 cycles be
                                                            fore end
  245 00000000 00AD5000 
                       APPWSCEQUA
                               EQU              0x00ad5000  ;; ext boot set lah
                                                            /lbn to these vaues
                                                             
  246 00000000         
  247 00000000         
  248 00000000         ;; #########################################
  249 00000000         ;; # NFC        #
  250 00000000         ;; #########################################
  251 00000000 BB000000 
                       NFC_BASE_ADDR
                               EQU              0xBB000000
  252 00000000 BB001E00 
                       NFC_REG_BASE_ADDR
                               EQU              (NFC_BASE_ADDR+0x1E00)
  253 00000000 BB001E04 
                       NFC_RAM_BUF_ADDR
                               EQU              (NFC_REG_BASE_ADDR+0x04)
  254 00000000 BB001E06 
                       NFC_NAND_FLASH_ADDR
                               EQU              (NFC_REG_BASE_ADDR+0x06)
  255 00000000 BB001E08 
                       NFC_NAND_FLASH_CMD
                               EQU              (NFC_REG_BASE_ADDR+0x08)
  256 00000000 BB001E0A 
                       NFC_CONFIG
                               EQU              (NFC_REG_BASE_ADDR+0x0A)
  257 00000000 BB001E0C 
                       NFC_ECC_STAT_RSLT1
                               EQU              (NFC_REG_BASE_ADDR+0x0C)
  258 00000000 BB001E0E 
                       NFC_ECC_STAT_RSLT2
                               EQU              (NFC_REG_BASE_ADDR+0x0E)
  259 00000000 BB001E10 
                       NFC_ECC_SPAS
                               EQU              (NFC_REG_BASE_ADDR+0x10)
  260 00000000 BB001E12 
                       NFC_NF_WR_PROT
                               EQU              (NFC_REG_BASE_ADDR+0x12)



ARM Macro Assembler    Page 32 


  261 00000000 BB001E18 
                       NFC_NF_WR_PROT_STAT
                               EQU              (NFC_REG_BASE_ADDR+0x18)
  262 00000000 BB001E1A 
                       NFC_NF_CONFIG1
                               EQU              (NFC_REG_BASE_ADDR+0x1A)
  263 00000000 BB001E1C 
                       NFC_NF_CONFIG2
                               EQU              (NFC_REG_BASE_ADDR+0x1C)
  264 00000000 BB001E20 
                       NFC_ULOCK_START_BLK0
                               EQU              (NFC_REG_BASE_ADDR+0x20)
  265 00000000 BB001E22 
                       NFC_ULOCK_END_BLK0
                               EQU              (NFC_REG_BASE_ADDR+0x22)
  266 00000000 BB001E24 
                       NFC_ULOCK_START_BLK1
                               EQU              (NFC_REG_BASE_ADDR+0x24)
  267 00000000 BB001E26 
                       NFC_ULOCK_END_BLK1
                               EQU              (NFC_REG_BASE_ADDR+0x26)
  268 00000000 BB001E28 
                       NFC_ULOCK_START_BLK2
                               EQU              (NFC_REG_BASE_ADDR+0x28)
  269 00000000 BB001E2A 
                       NFC_ULOCK_END_BLK2
                               EQU              (NFC_REG_BASE_ADDR+0x2A)
  270 00000000 BB001E2C 
                       NFC_ULOCK_START_BLK3
                               EQU              (NFC_REG_BASE_ADDR+0x2C)
  271 00000000 BB001E2E 
                       NFC_ULOCK_END_BLK3
                               EQU              (NFC_REG_BASE_ADDR+0x2E)
  272 00000000         
  273 00000000         ;; #########################################
  274 00000000         ;; # UART1        #
  275 00000000         ;; #########################################
  276 00000000 43F90000 
                       UART1_BASE_ADDR
                               EQU              0x43F90000
  277 00000000 43F90000 
                       UART1_URXD_1
                               EQU              (UART1_BASE_ADDR+0x00) ;; 32bit
                                                             uart1 receiver reg
                                                            
  278 00000000 43F90040 
                       UART1_UTXD_1
                               EQU              (UART1_BASE_ADDR+0x40) ;; 32bit
                                                             uart1 transmitter 
                                                            reg
  279 00000000 43F90080 
                       UART1_UCR1_1
                               EQU              (UART1_BASE_ADDR+0x80) ;; 32bit
                                                             uart1 control 1 re
                                                            g
  280 00000000 43F90084 
                       UART1_UCR2_1
                               EQU              (UART1_BASE_ADDR+0x84) ;; 32bit
                                                             uart1 control 2 re



ARM Macro Assembler    Page 33 


                                                            g
  281 00000000 43F90088 
                       UART1_UCR3_1
                               EQU              (UART1_BASE_ADDR+0x88) ;; 32bit
                                                             uart1 control 3 re
                                                            g
  282 00000000 43F9008C 
                       UART1_UCR4_1
                               EQU              (UART1_BASE_ADDR+0x8C) ;; 32bit
                                                             uart1 control 4 re
                                                            g
  283 00000000 43F90090 
                       UART1_UFCR_1
                               EQU              (UART1_BASE_ADDR+0x90) ;; 32bit
                                                             uart1 fifo control
                                                             reg
  284 00000000 43F90094 
                       UART1_USR1_1
                               EQU              (UART1_BASE_ADDR+0x94) ;; 32bit
                                                             uart1 status 1 reg
                                                            
  285 00000000 43F90098 
                       UART1_USR2_1
                               EQU              (UART1_BASE_ADDR+0x98) ;; 32bit
                                                             uart1 status 2 reg
                                                            
  286 00000000 43F9009C 
                       UART1_UESC_1
                               EQU              (UART1_BASE_ADDR+0x9C) ;; 32bit
                                                             uart1 escape char 
                                                            reg
  287 00000000 43F900A0 
                       UART1_UTIM_1
                               EQU              (UART1_BASE_ADDR+0xA0) ;; 32bit
                                                             uart1 escape timer
                                                             reg
  288 00000000 43F900A4 
                       UART1_UBIR_1
                               EQU              (UART1_BASE_ADDR+0xA4) ;; 32bit
                                                             uart1 BRM incremen
                                                            tal reg
  289 00000000 43F900A8 
                       UART1_UBMR_1
                               EQU              (UART1_BASE_ADDR+0xA8) ;; 32bit
                                                             uart1 BRM modulato
                                                            r reg
  290 00000000 43F900AC 
                       UART1_UBRC_1
                               EQU              (UART1_BASE_ADDR+0xAC) ;; 32bit
                                                             uart1 baud rate co
                                                            unt reg
  291 00000000 43F900B0 
                       UART1_ONEMS_1
                               EQU              (UART1_BASE_ADDR+0xB0) ;; 32bit
                                                             uart1 one ms reg
  292 00000000 43F900B4 
                       UART1_UTS_1
                               EQU              (UART1_BASE_ADDR+0xB4) ;; 32bit
                                                             uart1 test reg



ARM Macro Assembler    Page 34 


  293 00000000         
  294 00000000         ;;Uart1 masks
  295 00000000         ;;
  296 00000000 00004000 
                       USR2_1_BIT_14_TRANS_BUF_EMPTY_MASK
                               EQU              0x4000
  297 00000000         
  298 00000000         ;;UART1 name conversion table
  299 00000000         ;; mx27 has the following nomenclature, so to ease the c
                       onversion of manual to platform naming convention, redun
                       dantly re-define pin names.
  300 00000000         ;;
  301 00000000 43F90090 
                       UFCR_1  EQU              UART1_UFCR_1
  302 00000000 00000A81 
                       UFCR_1_SETTINGS
                               EQU              0x0A81      ;; sets refdiv / to
                                                             1, which means clo
                                                            ck into uart IS per
                                                            clk1 above
  303 00000000         ;UFCR_1_SETTINGS EQU  0x0981    ;; sets refdiv / to 3, w
                       hich means clock into uart IS perclk1(133MHz)/3 = 44.33M
                       Hz
  304 00000000 43F90080 
                       UCR1_1  EQU              UART1_UCR1_1
  305 00000000 00000001 
                       UCR1_1_SETTINGS
                               EQU              0x00000001  ;;Enable UART1, dis
                                                            able interupts
  306 00000000 43F90084 
                       UCR2_1  EQU              UART1_UCR2_1
  307 00000000 00005026 
                       UCR2_1_SETTINGS
                               EQU              0x00005026  ;;set up rts,cts, a
                                                            nd message paramete
                                                            rs
  308 00000000 43F90088 
                       UCR3_1  EQU              UART1_UCR3_1
  309 00000000 00000004 
                       UCR3_1_SETTINGS
                               EQU              0x00000004  ;;mux input selecte
                                                            d for UART receiver
                                                            
  310 00000000 43F9008C 
                       UCR4_1  EQU              UART1_UCR4_1
  311 00000000 00008000 
                       UCR4_1_SETTINGS
                               EQU              0x00008000  ;;SET cts trigger l
                                                            evel
  312 00000000 43F900A4 
                       UBIR_1  EQU              UART1_UBIR_1
  313 00000000         ;UBIR_1_SETTINGS EQU     575     ;; So 575 NUM and 20780
                        DENOM works good for imx27 with 66.5 mhz PERCLK1, (with
                        / 4) clock DIV
  314 00000000 00000732 
                       UBIR_1_SETTINGS
                               EQU              0x0732      ;;(732) So 1842 NUM
                                                             and 44329 DENOM wo
                                                            rks good for imx27 



ARM Macro Assembler    Page 35 


                                                            with 44.33 mhz PERC
                                                            LK1, (with / 6) clo
                                                            ck DIV
  315 00000000 43F900A8 
                       UBMR_1  EQU              UART1_UBMR_1
  316 00000000         ;;UBMR_1_SETTINGS EQU     20780    ;; So 575 NUM and 207
                       80 DENOM works good for imx27 with 66.5 mhz PERCLK1, (wi
                       th / 4) clock DIV
  317 00000000 0000AD29 
                       UBMR_1_SETTINGS
                               EQU              0xAD29      ;; So 1842 NUM and 
                                                            44329 DENOM works g
                                                            ood for imx27 with 
                                                            44.33 mhz PERCLK1, 
                                                            (with / 6) clock DI
                                                            V
  318 00000000 43F90040 
                       UTXDn_1 EQU              UART1_UTXD_1
  319 00000000 43F90098 
                       USR2_1  EQU              UART1_USR2_1
  320 00000000 43F900B4 
                       UTS_1   EQU              UART1_UTS_1
  321 00000000 00000800 
                       UTS_1_SETTINGS
                               EQU              0x00000800  ;; Allow UART to Ru
                                                            n in DEBUG mode
  322 00000000         
  323 00000000         ;; #########################################
  324 00000000         ;; # UART2        #
  325 00000000         ;; #########################################
  326 00000000 43F94000 
                       UART2_BASE_ADDR
                               EQU              0x43F94000
  327 00000000 43F94000 
                       UART2_URXD_2
                               EQU              (UART2_BASE_ADDR+0x00) ;; 32bit
                                                             uart2 receiver reg
                                                            
  328 00000000 43F94040 
                       UART2_UTXD_2
                               EQU              (UART2_BASE_ADDR+0x40) ;; 32bit
                                                             uart2 transmitter 
                                                            reg
  329 00000000 43F94080 
                       UART2_UCR1_2
                               EQU              (UART2_BASE_ADDR+0x80) ;; 32bit
                                                             uart2 control 1 re
                                                            g
  330 00000000 43F94084 
                       UART2_UCR2_2
                               EQU              (UART2_BASE_ADDR+0x84) ;; 32bit
                                                             uart2 control 2 re
                                                            g
  331 00000000 43F94088 
                       UART2_UCR3_2
                               EQU              (UART2_BASE_ADDR+0x88) ;; 32bit
                                                             uart2 control 3 re
                                                            g
  332 00000000 43F9408C 



ARM Macro Assembler    Page 36 


                       UART2_UCR4_2
                               EQU              (UART2_BASE_ADDR+0x8C) ;; 32bit
                                                             uart2 control 4 re
                                                            g
  333 00000000 43F94090 
                       UART2_UFCR_2
                               EQU              (UART2_BASE_ADDR+0x90) ;; 32bit
                                                             uart2 fifo control
                                                             reg
  334 00000000 43F94094 
                       UART2_USR1_2
                               EQU              (UART2_BASE_ADDR+0x94) ;; 32bit
                                                             uart2 status 1 reg
                                                            
  335 00000000 43F94098 
                       UART2_USR2_2
                               EQU              (UART2_BASE_ADDR+0x98) ;; 32bit
                                                             uart2 status 2 reg
                                                            
  336 00000000 43F9409C 
                       UART2_UESC_2
                               EQU              (UART2_BASE_ADDR+0x9C) ;; 32bit
                                                             uart2 escape char 
                                                            reg
  337 00000000 43F940A0 
                       UART2_UTIM_2
                               EQU              (UART2_BASE_ADDR+0xA0) ;; 32bit
                                                             uart2 escape timer
                                                             reg
  338 00000000 43F940A4 
                       UART2_UBIR_2
                               EQU              (UART2_BASE_ADDR+0xA4) ;; 32bit
                                                             uart2 BRM incremen
                                                            tal reg
  339 00000000 43F940A8 
                       UART2_UBMR_2
                               EQU              (UART2_BASE_ADDR+0xA8) ;; 32bit
                                                             uart2 BRM modulato
                                                            r reg
  340 00000000 43F940AC 
                       UART2_UBRC_2
                               EQU              (UART2_BASE_ADDR+0xAC) ;; 32bit
                                                             uart2 baud rate co
                                                            unt reg
  341 00000000 43F940B0 
                       UART2_ONEMS_2
                               EQU              (UART2_BASE_ADDR+0xB0) ;; 32bit
                                                             uart2 one ms reg
  342 00000000 43F940B4 
                       UART2_UTS_2
                               EQU              (UART2_BASE_ADDR+0xB4) ;; 32bit
                                                             uart2 test reg
  343 00000000         
  344 00000000         ;; #########################################
  345 00000000         ;; # GPIO1        #
  346 00000000         ;; #########################################
  347 00000000 53FCC000 
                       GPIO1_BASE_ADDR
                               EQU              0x53FCC000



ARM Macro Assembler    Page 37 


  348 00000000 53FCC000 
                       GPIO1_DR0
                               EQU              (GPIO1_BASE_ADDR+0x00)
  349 00000000 53FCC004 
                       GPIO1_GDIR0
                               EQU              (GPIO1_BASE_ADDR+0x04)
  350 00000000 53FCC008 
                       GPIO1_PSR0
                               EQU              (GPIO1_BASE_ADDR+0x08)
  351 00000000 53FCC00C 
                       GPIO1_ICR1
                               EQU              (GPIO1_BASE_ADDR+0x0C)
  352 00000000 53FCC010 
                       GPIO1_ICR2
                               EQU              (GPIO1_BASE_ADDR+0x10)
  353 00000000 53FCC014 
                       GPIO1_IMR
                               EQU              (GPIO1_BASE_ADDR+0x14)
  354 00000000 53FCC018 
                       GPIO1_ISR
                               EQU              (GPIO1_BASE_ADDR+0x18)
  355 00000000         
  356 00000000         ;; #########################################
  357 00000000         ;; # GPIO2        #
  358 00000000         ;; #########################################
  359 00000000 53FD0000 
                       GPIO2_BASE_ADDR
                               EQU              0x53FD0000
  360 00000000 53FD0000 
                       GPIO2_DR0
                               EQU              (GPIO2_BASE_ADDR+0x00)
  361 00000000 53FD0004 
                       GPIO2_GDIR0
                               EQU              (GPIO2_BASE_ADDR+0x04)
  362 00000000 53FD0008 
                       GPIO2_PSR0
                               EQU              (GPIO2_BASE_ADDR+0x08)
  363 00000000 53FD000C 
                       GPIO2_ICR1
                               EQU              (GPIO2_BASE_ADDR+0x0C)
  364 00000000 53FD0010 
                       GPIO2_ICR2
                               EQU              (GPIO2_BASE_ADDR+0x10)
  365 00000000 53FD0014 
                       GPIO2_IMR
                               EQU              (GPIO2_BASE_ADDR+0x14)
  366 00000000 53FD0018 
                       GPIO2_ISR
                               EQU              (GPIO2_BASE_ADDR+0x18)
  367 00000000         
  368 00000000         ;; #########################################
  369 00000000         ;; # GPIO3        #
  370 00000000         ;; #########################################
  371 00000000 53FA4000 
                       GPIO3_BASE_ADDR
                               EQU              0x53FA4000
  372 00000000 53FA4000 
                       GPIO3_DR0
                               EQU              (GPIO3_BASE_ADDR+0x00)



ARM Macro Assembler    Page 38 


  373 00000000 53FA4004 
                       GPIO3_GDIR0
                               EQU              (GPIO3_BASE_ADDR+0x04)
  374 00000000 53FA4008 
                       GPIO3_PSR0
                               EQU              (GPIO3_BASE_ADDR+0x08)
  375 00000000 53FA400C 
                       GPIO3_ICR1
                               EQU              (GPIO3_BASE_ADDR+0x0C)
  376 00000000 53FA4010 
                       GPIO3_ICR2
                               EQU              (GPIO3_BASE_ADDR+0x10)
  377 00000000 53FA4014 
                       GPIO3_IMR
                               EQU              (GPIO3_BASE_ADDR+0x14)
  378 00000000 53FA4018 
                       GPIO3_ISR
                               EQU              (GPIO3_BASE_ADDR+0x18)
  379 00000000         
  380 00000000         ;; #########################################
  381 00000000         ;; # GPIO4        #
  382 00000000         ;; #########################################
  383 00000000 53F9C000 
                       GPIO4_BASE_ADDR
                               EQU              0x53F9C000
  384 00000000 53F9C000 
                       GPIO4_DR0
                               EQU              (GPIO4_BASE_ADDR+0x00)
  385 00000000 53F9C004 
                       GPIO4_GDIR0
                               EQU              (GPIO4_BASE_ADDR+0x04)
  386 00000000 53F9C008 
                       GPIO4_PSR0
                               EQU              (GPIO4_BASE_ADDR+0x08)
  387 00000000 53F9C00C 
                       GPIO4_ICR1
                               EQU              (GPIO4_BASE_ADDR+0x0C)
  388 00000000 53F9C010 
                       GPIO4_ICR2
                               EQU              (GPIO4_BASE_ADDR+0x10)
  389 00000000 53F9C014 
                       GPIO4_IMR
                               EQU              (GPIO4_BASE_ADDR+0x14)
  390 00000000 53F9C018 
                       GPIO4_ISR
                               EQU              (GPIO4_BASE_ADDR+0x18)
  391 00000000         
  392 00000000         ;; #########################################
  393 00000000         ;; # GPT1        #
  394 00000000         ;; #########################################
  395 00000000 53F90000 
                       GPT1_BASE_ADDR
                               EQU              0x53F90000
  396 00000000 53F90000 
                       GPT1_GPT1CR
                               EQU              (GPT1_BASE_ADDR+0x00)
  397 00000000 53F90004 
                       GPT1_GPT1PR
                               EQU              (GPT1_BASE_ADDR+0x04)



ARM Macro Assembler    Page 39 


  398 00000000 53F90008 
                       GPT1_GPT1SR
                               EQU              (GPT1_BASE_ADDR+0x08)
  399 00000000 53F9000C 
                       GPT1_GPT1IR
                               EQU              (GPT1_BASE_ADDR+0x0C)
  400 00000000 53F90010 
                       GPT1_GPT1OCR1
                               EQU              (GPT1_BASE_ADDR+0x10)
  401 00000000 53F90014 
                       GPT1_GPT1OCR2
                               EQU              (GPT1_BASE_ADDR+0x14)
  402 00000000 53F90018 
                       GPT1_GPT1OCR3
                               EQU              (GPT1_BASE_ADDR+0x18)
  403 00000000 53F9001C 
                       GPT1_GPT1ICR1
                               EQU              (GPT1_BASE_ADDR+0x1C)
  404 00000000 53F90020 
                       GPT1_GPT1ICR2
                               EQU              (GPT1_BASE_ADDR+0x20)
  405 00000000 53F90024 
                       GPT1_GPT1CNT
                               EQU              (GPT1_BASE_ADDR+0x24)
  406 00000000         
  407 00000000         ;;RTC name conversion table
  408 00000000         ;; mxl has the following nomenclature, so to ease the co
                       nversion of manual to platform naming convention, redund
                       antly re-define pin names.
  409 00000000         ;; iMX25 does not have a RTC
  410 00000000         
  411 00000000 53F90000 
                       RTC_BASE_ADDR_UPPER
                               EQU              GPT1_BASE_ADDR
  412 00000000 00000000 
                       RTC_BASE_ADDR_LOWER
                               EQU              0x00000000
  413 00000000 00000004 
                       RTC_BASE_ADDR_RTC_SECOND_OFFSET
                               EQU              0x00000004
  414 00000000         
  415 00000000         ;; #########################################
  416 00000000         ;; # GPT2        #
  417 00000000         ;; #########################################
  418 00000000 53F8C000 
                       GPT2_BASE_ADDR
                               EQU              0x53F8C000
  419 00000000 53F8C000 
                       GPT2_GPT2CR
                               EQU              (GPT2_BASE_ADDR+0x00)
  420 00000000 53F8C004 
                       GPT2_GPT2PR
                               EQU              (GPT2_BASE_ADDR+0x04)
  421 00000000 53F8C008 
                       GPT2_GPT2SR
                               EQU              (GPT2_BASE_ADDR+0x08)
  422 00000000 53F8C00C 
                       GPT2_GPT2IR
                               EQU              (GPT2_BASE_ADDR+0x0C)



ARM Macro Assembler    Page 40 


  423 00000000 53F8C010 
                       GPT2_GPT2OCR1
                               EQU              (GPT2_BASE_ADDR+0x10)
  424 00000000 53F8C014 
                       GPT2_GPT2OCR2
                               EQU              (GPT2_BASE_ADDR+0x14)
  425 00000000 53F8C018 
                       GPT2_GPT2OCR3
                               EQU              (GPT2_BASE_ADDR+0x18)
  426 00000000 53F8C01C 
                       GPT2_GPT2ICR1
                               EQU              (GPT2_BASE_ADDR+0x1C)
  427 00000000 53F8C020 
                       GPT2_GPT2ICR2
                               EQU              (GPT2_BASE_ADDR+0x20)
  428 00000000 53F8C024 
                       GPT2_GPT2CNT
                               EQU              (GPT2_BASE_ADDR+0x24)
  429 00000000         
  430 00000000         ;; #########################################
  431 00000000         ;; # GPT3        #
  432 00000000         ;; #########################################
  433 00000000 53F88000 
                       GPT3_BASE_ADDR
                               EQU              0x53F88000
  434 00000000 53F88000 
                       GPT3_GPT3CR
                               EQU              (GPT3_BASE_ADDR+0x00)
  435 00000000 53F88004 
                       GPT3_GPT3PR
                               EQU              (GPT3_BASE_ADDR+0x04)
  436 00000000 53F88008 
                       GPT3_GPT3SR
                               EQU              (GPT3_BASE_ADDR+0x08)
  437 00000000 53F8800C 
                       GPT3_GPT3IR
                               EQU              (GPT3_BASE_ADDR+0x0C)
  438 00000000 53F88010 
                       GPT3_GPT3OCR1
                               EQU              (GPT3_BASE_ADDR+0x10)
  439 00000000 53F88014 
                       GPT3_GPT3OCR2
                               EQU              (GPT3_BASE_ADDR+0x14)
  440 00000000 53F88018 
                       GPT3_GPT3OCR3
                               EQU              (GPT3_BASE_ADDR+0x18)
  441 00000000 53F8801C 
                       GPT3_GPT3ICR1
                               EQU              (GPT3_BASE_ADDR+0x1C)
  442 00000000 53F88020 
                       GPT3_GPT3ICR2
                               EQU              (GPT3_BASE_ADDR+0x20)
  443 00000000 53F88024 
                       GPT3_GPT3CNT
                               EQU              (GPT3_BASE_ADDR+0x24)
  444 00000000         
  445 00000000         ;; ##########################################
  446 00000000         ;; # GPT4           #
  447 00000000         ;; ##########################################



ARM Macro Assembler    Page 41 


  448 00000000 53F84000 
                       GPT4_BASE_ADDR
                               EQU              0x53F84000
  449 00000000 53F84000 
                       GPT4_GPT4CR
                               EQU              (GPT4_BASE_ADDR+0x00)
  450 00000000 53F84004 
                       GPT4_GPT4PR
                               EQU              (GPT4_BASE_ADDR+0x04)
  451 00000000 53F84008 
                       GPT4_GPT4SR
                               EQU              (GPT4_BASE_ADDR+0x08)
  452 00000000 53F8400C 
                       GPT4_GPT4IR
                               EQU              (GPT4_BASE_ADDR+0x0C)
  453 00000000 53F84010 
                       GPT4_GPT4OCR1
                               EQU              (GPT4_BASE_ADDR+0x10)
  454 00000000 53F84014 
                       GPT4_GPT4OCR2
                               EQU              (GPT4_BASE_ADDR+0x14)
  455 00000000 53F84018 
                       GPT4_GPT4OCR3
                               EQU              (GPT4_BASE_ADDR+0x18)
  456 00000000 53F8401C 
                       GPT4_GPT4ICR1
                               EQU              (GPT4_BASE_ADDR+0x1C)
  457 00000000 53F84020 
                       GPT4_GPT4ICR2
                               EQU              (GPT4_BASE_ADDR+0x20)
  458 00000000 53F84024 
                       GPT4_GPT4CNT
                               EQU              (GPT4_BASE_ADDR+0x24)
  459 00000000         
  460 00000000         ;; ##########################################
  461 00000000         ;; # WDOG           #
  462 00000000         ;; ##########################################
  463 00000000 53FDC000 
                       WDOG_BASE_ADDR
                               EQU              0x53FDC000
  464 00000000 53FDC000 
                       WDOG_WCR
                               EQU              (WDOG_BASE_ADDR+0x00) ;; 16bit 
                                                            watchdog control re
                                                            g
  465 00000000 53FDC002 
                       WDOG_WSR
                               EQU              (WDOG_BASE_ADDR+0x02) ;; 16bit 
                                                            watchdog service re
                                                            g
  466 00000000 53FDC004 
                       WDOG_WRSR
                               EQU              (WDOG_BASE_ADDR+0x04) ;; 16bit 
                                                            watchdog reset stat
                                                            us reg
  467 00000000         
  468 00000000         ;;Watchdog name conversion table
  469 00000000         ;; mxl has the following nomenclature, so to ease the co
                       nversion of manual to platform naming convention, redund



ARM Macro Assembler    Page 42 


                       antly re-define pin names.
  470 00000000         ;;
  471 00000000 53FD0000 
                       WATCHDOG_BASE_ADDR_UPPER
                               EQU              0x53FD0000
  472 00000000 0000C000 
                       WATCHDOG_BASE_ADDR_LOWER
                               EQU              0x0000C000
  473 00000000 00000000 
                       WATCHDOG_BASE_ADDR_WCR_OFFSET
                               EQU              0x00000000
  474 00000000 00000002 
                       WATCHDOG_BASE_ADDR_WSR_OFFSET
                               EQU              0x00000002
  475 00000000 00000004 
                       WATCHDOG_BASE_ADDR_WRSR_OFFSET
                               EQU              0x00000004
  476 00000000         
  477 00000000         ;; ##########################################
  478 00000000         ;; # External Memory CSD0 CSD1     #
  479 00000000         ;; ##########################################
  480 00000000 80000000 
                       CSD0_BASE_ADDR
                               EQU              0x80000000
  481 00000000 8FFFFFFF 
                       CSD0_END_ADDR
                               EQU              0x8FFFFFFF
  482 00000000 90000000 
                       CSD1_BASE_ADDR
                               EQU              0x90000000
  483 00000000 9FFFFFFF 
                       CSD1_END_ADDR
                               EQU              0x9FFFFFFF
  484 00000000         
  485 00000000         ;; ##########################################
  486 00000000         ;; # External Memory CS0 - CS5     #
  487 00000000         ;; # $A000_0000 to $A7FF_FFFF (CS0)   #
  488 00000000         ;; # $A800_0000 to $AFFF_FFFF (CS1)   #
  489 00000000         ;; # $B000_0000 to $B1FF_FFFF (CS2)   #
  490 00000000         ;; # $B200_0000 to $B3FF_FFFF (CS3)   #
  491 00000000         ;; # $B400_0000 to $B5FF_FFFF (CS4)   #
  492 00000000         ;; # $B600_0000 to $B7FF_FFFF (CS5)   #
  493 00000000         ;; ##########################################
  494 00000000 A0000000 
                       CS0_BASE_ADDR
                               EQU              0xA0000000
  495 00000000 A7FFFFFF 
                       CS0_END_ADDR
                               EQU              (CS0_BASE_ADDR+0x7FFFFFF)
  496 00000000 A8000000 
                       CS1_BASE_ADDR
                               EQU              0xA8000000
  497 00000000 AFFFFFFF 
                       CS1_END_ADDR
                               EQU              (CS1_BASE_ADDR+0x7FFFFFF)
  498 00000000 B0000000 
                       CS2_BASE_ADDR
                               EQU              0xB0000000
  499 00000000 B1FFFFFF 



ARM Macro Assembler    Page 43 


                       CS2_END_ADDR
                               EQU              (CS2_BASE_ADDR+0x1FFFFFF)
  500 00000000 B2000000 
                       CS3_BASE_ADDR
                               EQU              0xB2000000
  501 00000000 B3FFFFFF 
                       CS3_END_ADDR
                               EQU              (CS3_BASE_ADDR+0x1FFFFFF)
  502 00000000 B4000000 
                       CS4_BASE_ADDR
                               EQU              0xB4000000
  503 00000000 B5FFFFFF 
                       CS4_END_ADDR
                               EQU              (CS4_BASE_ADDR+0x1FFFFFF)
  504 00000000 B6000000 
                       CS5_BASE_ADDR
                               EQU              0xB6000000
  505 00000000 B7FFFFFF 
                       CS5_END_ADDR
                               EQU              (CS5_BASE_ADDR+0x1FFFFFF)
  506 00000000         
  507 00000000         ;; ##########################################
  508 00000000         ;; # RAM (128KB)         #
  509 00000000         ;; # $7800_0000 to $7801_FFFF     #
  510 00000000         ;; ##########################################
  511 00000000 78000000 
                       RAM_BASE_ADDR
                               EQU              0x78000000
  512 00000000         
  513 00000000         
  514 00000000         ;; #########################################
  515 00000000         ;; # IOMUXC           #
  516 00000000         ;; #########################################
  517 00000000 43FAC000 
                       IOMUXC_BASE_ADDR
                               EQU              0x43FAC000
  518 00000000         
  519 00000000 43FAC000 
                       IOMUXC_GPR1
                               EQU              (IOMUXC_BASE_ADDR+0x0)
  520 00000000 43FAC004 
                       IOMUXC_OBSERVE_INT_MUX
                               EQU              (IOMUXC_BASE_ADDR+0x4)
  521 00000000         
  522 00000000 43FAC008 
                       IOMUXC_SW_MUX_CTL_PAD_A10
                               EQU              (IOMUXC_BASE_ADDR+0x8)
  523 00000000 43FAC00C 
                       IOMUXC_SW_MUX_CTL_PAD_A13
                               EQU              (IOMUXC_BASE_ADDR+0xc)
  524 00000000 43FAC010 
                       IOMUXC_SW_MUX_CTL_PAD_A14
                               EQU              (IOMUXC_BASE_ADDR+0x10)
  525 00000000 43FAC014 
                       IOMUXC_SW_MUX_CTL_PAD_A15
                               EQU              (IOMUXC_BASE_ADDR+0x14)
  526 00000000 43FAC018 
                       IOMUXC_SW_MUX_CTL_PAD_A16
                               EQU              (IOMUXC_BASE_ADDR+0x18)



ARM Macro Assembler    Page 44 


  527 00000000 43FAC01C 
                       IOMUXC_SW_MUX_CTL_PAD_A17
                               EQU              (IOMUXC_BASE_ADDR+0x1c)
  528 00000000 43FAC020 
                       IOMUXC_SW_MUX_CTL_PAD_A18
                               EQU              (IOMUXC_BASE_ADDR+0x20)
  529 00000000 43FAC024 
                       IOMUXC_SW_MUX_CTL_PAD_A19
                               EQU              (IOMUXC_BASE_ADDR+0x24)
  530 00000000 43FAC028 
                       IOMUXC_SW_MUX_CTL_PAD_A20
                               EQU              (IOMUXC_BASE_ADDR+0x28)
  531 00000000 43FAC02C 
                       IOMUXC_SW_MUX_CTL_PAD_A21
                               EQU              (IOMUXC_BASE_ADDR+0x2c)
  532 00000000 43FAC030 
                       IOMUXC_SW_MUX_CTL_PAD_A22
                               EQU              (IOMUXC_BASE_ADDR+0x30)
  533 00000000 43FAC034 
                       IOMUXC_SW_MUX_CTL_PAD_A23
                               EQU              (IOMUXC_BASE_ADDR+0x34)
  534 00000000 43FAC038 
                       IOMUXC_SW_MUX_CTL_PAD_A24
                               EQU              (IOMUXC_BASE_ADDR+0x38)
  535 00000000 43FAC03C 
                       IOMUXC_SW_MUX_CTL_PAD_A25
                               EQU              (IOMUXC_BASE_ADDR+0x3c)
  536 00000000 43FAC040 
                       IOMUXC_SW_MUX_CTL_PAD_EB0
                               EQU              (IOMUXC_BASE_ADDR+0x40)
  537 00000000 43FAC044 
                       IOMUXC_SW_MUX_CTL_PAD_EB1
                               EQU              (IOMUXC_BASE_ADDR+0x44)
  538 00000000 43FAC048 
                       IOMUXC_SW_MUX_CTL_PAD_OE
                               EQU              (IOMUXC_BASE_ADDR+0x48)
  539 00000000 43FAC04C 
                       IOMUXC_SW_MUX_CTL_PAD_CS0
                               EQU              (IOMUXC_BASE_ADDR+0x4c)
  540 00000000 43FAC050 
                       IOMUXC_SW_MUX_CTL_PAD_CS1
                               EQU              (IOMUXC_BASE_ADDR+0x50)
  541 00000000 43FAC054 
                       IOMUXC_SW_MUX_CTL_PAD_CS4
                               EQU              (IOMUXC_BASE_ADDR+0x54)
  542 00000000 43FAC058 
                       IOMUXC_SW_MUX_CTL_PAD_CS5
                               EQU              (IOMUXC_BASE_ADDR+0x58)
  543 00000000 43FAC05C 
                       IOMUXC_SW_MUX_CTL_PAD_NF_CE0
                               EQU              (IOMUXC_BASE_ADDR+0x5c)
  544 00000000 43FAC060 
                       IOMUXC_SW_MUX_CTL_PAD_ECB
                               EQU              (IOMUXC_BASE_ADDR+0x60)
  545 00000000 43FAC064 
                       IOMUXC_SW_MUX_CTL_PAD_LBA
                               EQU              (IOMUXC_BASE_ADDR+0x64)
  546 00000000 43FAC068 
                       IOMUXC_SW_MUX_CTL_PAD_BCLK



ARM Macro Assembler    Page 45 


                               EQU              (IOMUXC_BASE_ADDR+0x68)
  547 00000000 43FAC06C 
                       IOMUXC_SW_MUX_CTL_PAD_RW
                               EQU              (IOMUXC_BASE_ADDR+0x6c)
  548 00000000 43FAC070 
                       IOMUXC_SW_MUX_CTL_PAD_NFWE_B
                               EQU              (IOMUXC_BASE_ADDR+0x70)
  549 00000000 43FAC074 
                       IOMUXC_SW_MUX_CTL_PAD_NFRE_B
                               EQU              (IOMUXC_BASE_ADDR+0x74)
  550 00000000 43FAC078 
                       IOMUXC_SW_MUX_CTL_PAD_NFALE
                               EQU              (IOMUXC_BASE_ADDR+0x78)
  551 00000000 43FAC07C 
                       IOMUXC_SW_MUX_CTL_PAD_NFCLE
                               EQU              (IOMUXC_BASE_ADDR+0x7c)
  552 00000000 43FAC080 
                       IOMUXC_SW_MUX_CTL_PAD_NFWP_B
                               EQU              (IOMUXC_BASE_ADDR+0x80)
  553 00000000 43FAC084 
                       IOMUXC_SW_MUX_CTL_PAD_NFRB
                               EQU              (IOMUXC_BASE_ADDR+0x84)
  554 00000000 43FAC088 
                       IOMUXC_SW_MUX_CTL_PAD_D15
                               EQU              (IOMUXC_BASE_ADDR+0x88)
  555 00000000 43FAC08C 
                       IOMUXC_SW_MUX_CTL_PAD_D14
                               EQU              (IOMUXC_BASE_ADDR+0x8c)
  556 00000000 43FAC090 
                       IOMUXC_SW_MUX_CTL_PAD_D13
                               EQU              (IOMUXC_BASE_ADDR+0x90)
  557 00000000 43FAC094 
                       IOMUXC_SW_MUX_CTL_PAD_D12
                               EQU              (IOMUXC_BASE_ADDR+0x94)
  558 00000000 43FAC098 
                       IOMUXC_SW_MUX_CTL_PAD_D11
                               EQU              (IOMUXC_BASE_ADDR+0x98)
  559 00000000 43FAC09C 
                       IOMUXC_SW_MUX_CTL_PAD_D10
                               EQU              (IOMUXC_BASE_ADDR+0x9c)
  560 00000000 43FAC0A0 
                       IOMUXC_SW_MUX_CTL_PAD_D9
                               EQU              (IOMUXC_BASE_ADDR+0xa0)
  561 00000000 43FAC0A4 
                       IOMUXC_SW_MUX_CTL_PAD_D8
                               EQU              (IOMUXC_BASE_ADDR+0xa4)
  562 00000000 43FAC0A8 
                       IOMUXC_SW_MUX_CTL_PAD_D7
                               EQU              (IOMUXC_BASE_ADDR+0xa8)
  563 00000000 43FAC0AC 
                       IOMUXC_SW_MUX_CTL_PAD_D6
                               EQU              (IOMUXC_BASE_ADDR+0xac)
  564 00000000 43FAC0B0 
                       IOMUXC_SW_MUX_CTL_PAD_D5
                               EQU              (IOMUXC_BASE_ADDR+0xb0)
  565 00000000 43FAC0B4 
                       IOMUXC_SW_MUX_CTL_PAD_D4
                               EQU              (IOMUXC_BASE_ADDR+0xb4)
  566 00000000 43FAC0B8 



ARM Macro Assembler    Page 46 


                       IOMUXC_SW_MUX_CTL_PAD_D3
                               EQU              (IOMUXC_BASE_ADDR+0xb8)
  567 00000000 43FAC0BC 
                       IOMUXC_SW_MUX_CTL_PAD_D2
                               EQU              (IOMUXC_BASE_ADDR+0xbc)
  568 00000000 43FAC0C0 
                       IOMUXC_SW_MUX_CTL_PAD_D1
                               EQU              (IOMUXC_BASE_ADDR+0xc0)
  569 00000000 43FAC0C4 
                       IOMUXC_SW_MUX_CTL_PAD_D0
                               EQU              (IOMUXC_BASE_ADDR+0xc4)
  570 00000000 43FAC0C8 
                       IOMUXC_SW_MUX_CTL_PAD_LD0
                               EQU              (IOMUXC_BASE_ADDR+0xc8)
  571 00000000 43FAC0CC 
                       IOMUXC_SW_MUX_CTL_PAD_LD1
                               EQU              (IOMUXC_BASE_ADDR+0xcc)
  572 00000000 43FAC0D0 
                       IOMUXC_SW_MUX_CTL_PAD_LD2
                               EQU              (IOMUXC_BASE_ADDR+0xd0)
  573 00000000 43FAC0D4 
                       IOMUXC_SW_MUX_CTL_PAD_LD3
                               EQU              (IOMUXC_BASE_ADDR+0xd4)
  574 00000000 43FAC0D8 
                       IOMUXC_SW_MUX_CTL_PAD_LD4
                               EQU              (IOMUXC_BASE_ADDR+0xd8)
  575 00000000 43FAC0DC 
                       IOMUXC_SW_MUX_CTL_PAD_LD5
                               EQU              (IOMUXC_BASE_ADDR+0xdc)
  576 00000000 43FAC0E0 
                       IOMUXC_SW_MUX_CTL_PAD_LD6
                               EQU              (IOMUXC_BASE_ADDR+0xe0)
  577 00000000 43FAC0E4 
                       IOMUXC_SW_MUX_CTL_PAD_LD7
                               EQU              (IOMUXC_BASE_ADDR+0xe4)
  578 00000000 43FAC0E8 
                       IOMUXC_SW_MUX_CTL_PAD_LD8
                               EQU              (IOMUXC_BASE_ADDR+0xe8)
  579 00000000 43FAC0EC 
                       IOMUXC_SW_MUX_CTL_PAD_LD9
                               EQU              (IOMUXC_BASE_ADDR+0xec)
  580 00000000 43FAC0F0 
                       IOMUXC_SW_MUX_CTL_PAD_LD10
                               EQU              (IOMUXC_BASE_ADDR+0xf0)
  581 00000000 43FAC0F4 
                       IOMUXC_SW_MUX_CTL_PAD_LD11
                               EQU              (IOMUXC_BASE_ADDR+0xf4)
  582 00000000 43FAC0F8 
                       IOMUXC_SW_MUX_CTL_PAD_LD12
                               EQU              (IOMUXC_BASE_ADDR+0xf8)
  583 00000000 43FAC0FC 
                       IOMUXC_SW_MUX_CTL_PAD_LD13
                               EQU              (IOMUXC_BASE_ADDR+0xfc)
  584 00000000 43FAC100 
                       IOMUXC_SW_MUX_CTL_PAD_LD14
                               EQU              (IOMUXC_BASE_ADDR+0x100)
  585 00000000 43FAC104 
                       IOMUXC_SW_MUX_CTL_PAD_LD15
                               EQU              (IOMUXC_BASE_ADDR+0x104)



ARM Macro Assembler    Page 47 


  586 00000000 43FAC108 
                       IOMUXC_SW_MUX_CTL_PAD_HSYNC
                               EQU              (IOMUXC_BASE_ADDR+0x108)
  587 00000000 43FAC10C 
                       IOMUXC_SW_MUX_CTL_PAD_VSYNC
                               EQU              (IOMUXC_BASE_ADDR+0x10c)
  588 00000000 43FAC110 
                       IOMUXC_SW_MUX_CTL_PAD_LSCLK
                               EQU              (IOMUXC_BASE_ADDR+0x110)
  589 00000000 43FAC114 
                       IOMUXC_SW_MUX_CTL_PAD_OE_ACD
                               EQU              (IOMUXC_BASE_ADDR+0x114)
  590 00000000 43FAC118 
                       IOMUXC_SW_MUX_CTL_PAD_CONTRAST
                               EQU              (IOMUXC_BASE_ADDR+0x118)
  591 00000000 43FAC11C 
                       IOMUXC_SW_MUX_CTL_PAD_PWM
                               EQU              (IOMUXC_BASE_ADDR+0x11c)
  592 00000000 43FAC120 
                       IOMUXC_SW_MUX_CTL_PAD_CSI_D2
                               EQU              (IOMUXC_BASE_ADDR+0x120)
  593 00000000 43FAC124 
                       IOMUXC_SW_MUX_CTL_PAD_CSI_D3
                               EQU              (IOMUXC_BASE_ADDR+0x124)
  594 00000000 43FAC128 
                       IOMUXC_SW_MUX_CTL_PAD_CSI_D4
                               EQU              (IOMUXC_BASE_ADDR+0x128)
  595 00000000 43FAC12C 
                       IOMUXC_SW_MUX_CTL_PAD_CSI_D5
                               EQU              (IOMUXC_BASE_ADDR+0x12c)
  596 00000000 43FAC130 
                       IOMUXC_SW_MUX_CTL_PAD_CSI_D6
                               EQU              (IOMUXC_BASE_ADDR+0x130)
  597 00000000 43FAC134 
                       IOMUXC_SW_MUX_CTL_PAD_CSI_D7
                               EQU              (IOMUXC_BASE_ADDR+0x134)
  598 00000000 43FAC138 
                       IOMUXC_SW_MUX_CTL_PAD_CSI_D8
                               EQU              (IOMUXC_BASE_ADDR+0x138)
  599 00000000 43FAC13C 
                       IOMUXC_SW_MUX_CTL_PAD_CSI_D9
                               EQU              (IOMUXC_BASE_ADDR+0x13c)
  600 00000000 43FAC140 
                       IOMUXC_SW_MUX_CTL_PAD_CSI_MCLK
                               EQU              (IOMUXC_BASE_ADDR+0x140)
  601 00000000 43FAC144 
                       IOMUXC_SW_MUX_CTL_PAD_CSI_VSYNC
                               EQU              (IOMUXC_BASE_ADDR+0x144)
  602 00000000 43FAC148 
                       IOMUXC_SW_MUX_CTL_PAD_CSI_HSYNC
                               EQU              (IOMUXC_BASE_ADDR+0x148)
  603 00000000 43FAC14C 
                       IOMUXC_SW_MUX_CTL_PAD_CSI_PIXCLK
                               EQU              (IOMUXC_BASE_ADDR+0x14c)
  604 00000000 43FAC150 
                       IOMUXC_SW_MUX_CTL_PAD_I2C1_CLK
                               EQU              (IOMUXC_BASE_ADDR+0x150)
  605 00000000 43FAC154 
                       IOMUXC_SW_MUX_CTL_PAD_I2C1_DAT



ARM Macro Assembler    Page 48 


                               EQU              (IOMUXC_BASE_ADDR+0x154)
  606 00000000 43FAC158 
                       IOMUXC_SW_MUX_CTL_PAD_CSPI1_MOSI
                               EQU              (IOMUXC_BASE_ADDR+0x158)
  607 00000000 43FAC15C 
                       IOMUXC_SW_MUX_CTL_PAD_CSPI1_MISO
                               EQU              (IOMUXC_BASE_ADDR+0x15c)
  608 00000000 43FAC160 
                       IOMUXC_SW_MUX_CTL_PAD_CSPI1_SS0
                               EQU              (IOMUXC_BASE_ADDR+0x160)
  609 00000000 43FAC164 
                       IOMUXC_SW_MUX_CTL_PAD_CSPI1_SS1
                               EQU              (IOMUXC_BASE_ADDR+0x164)
  610 00000000 43FAC168 
                       IOMUXC_SW_MUX_CTL_PAD_CSPI1_SCLK
                               EQU              (IOMUXC_BASE_ADDR+0x168)
  611 00000000 43FAC16C 
                       IOMUXC_SW_MUX_CTL_PAD_CSPI1_RDY
                               EQU              (IOMUXC_BASE_ADDR+0x16c)
  612 00000000 43FAC170 
                       IOMUXC_SW_MUX_CTL_PAD_UART1_RXD
                               EQU              (IOMUXC_BASE_ADDR+0x170)
  613 00000000 43FAC174 
                       IOMUXC_SW_MUX_CTL_PAD_UART1_TXD
                               EQU              (IOMUXC_BASE_ADDR+0x174)
  614 00000000 43FAC178 
                       IOMUXC_SW_MUX_CTL_PAD_UART1_RTS
                               EQU              (IOMUXC_BASE_ADDR+0x178)
  615 00000000 43FAC17C 
                       IOMUXC_SW_MUX_CTL_PAD_UART1_CTS
                               EQU              (IOMUXC_BASE_ADDR+0x17c)
  616 00000000 43FAC180 
                       IOMUXC_SW_MUX_CTL_PAD_UART2_RXD
                               EQU              (IOMUXC_BASE_ADDR+0x180)
  617 00000000 43FAC184 
                       IOMUXC_SW_MUX_CTL_PAD_UART2_TXD
                               EQU              (IOMUXC_BASE_ADDR+0x184)
  618 00000000 43FAC188 
                       IOMUXC_SW_MUX_CTL_PAD_UART2_RTS
                               EQU              (IOMUXC_BASE_ADDR+0x188)
  619 00000000 43FAC18C 
                       IOMUXC_SW_MUX_CTL_PAD_UART2_CTS
                               EQU              (IOMUXC_BASE_ADDR+0x18c)
  620 00000000 43FAC190 
                       IOMUXC_SW_MUX_CTL_PAD_SD1_CMD
                               EQU              (IOMUXC_BASE_ADDR+0x190)
  621 00000000 43FAC194 
                       IOMUXC_SW_MUX_CTL_PAD_SD1_CLK
                               EQU              (IOMUXC_BASE_ADDR+0x194)
  622 00000000 43FAC198 
                       IOMUXC_SW_MUX_CTL_PAD_SD1_DATA0
                               EQU              (IOMUXC_BASE_ADDR+0x198)
  623 00000000 43FAC19C 
                       IOMUXC_SW_MUX_CTL_PAD_SD1_DATA1
                               EQU              (IOMUXC_BASE_ADDR+0x19c)
  624 00000000 43FAC1A0 
                       IOMUXC_SW_MUX_CTL_PAD_SD1_DATA2
                               EQU              (IOMUXC_BASE_ADDR+0x1a0)
  625 00000000 43FAC1A4 



ARM Macro Assembler    Page 49 


                       IOMUXC_SW_MUX_CTL_PAD_SD1_DATA3
                               EQU              (IOMUXC_BASE_ADDR+0x1a4)
  626 00000000 43FAC1A8 
                       IOMUXC_SW_MUX_CTL_PAD_KPP_ROW0
                               EQU              (IOMUXC_BASE_ADDR+0x1a8)
  627 00000000 43FAC1AC 
                       IOMUXC_SW_MUX_CTL_PAD_KPP_ROW1
                               EQU              (IOMUXC_BASE_ADDR+0x1ac)
  628 00000000 43FAC1B0 
                       IOMUXC_SW_MUX_CTL_PAD_KPP_ROW2
                               EQU              (IOMUXC_BASE_ADDR+0x1b0)
  629 00000000 43FAC1B4 
                       IOMUXC_SW_MUX_CTL_PAD_KPP_ROW3
                               EQU              (IOMUXC_BASE_ADDR+0x1b4)
  630 00000000 43FAC1B8 
                       IOMUXC_SW_MUX_CTL_PAD_KPP_COL0
                               EQU              (IOMUXC_BASE_ADDR+0x1b8)
  631 00000000 43FAC1BC 
                       IOMUXC_SW_MUX_CTL_PAD_KPP_COL1
                               EQU              (IOMUXC_BASE_ADDR+0x1bc)
  632 00000000 43FAC1C0 
                       IOMUXC_SW_MUX_CTL_PAD_KPP_COL2
                               EQU              (IOMUXC_BASE_ADDR+0x1c0)
  633 00000000 43FAC1C4 
                       IOMUXC_SW_MUX_CTL_PAD_KPP_COL3
                               EQU              (IOMUXC_BASE_ADDR+0x1c4)
  634 00000000 43FAC1C8 
                       IOMUXC_SW_MUX_CTL_PAD_FEC_MDC
                               EQU              (IOMUXC_BASE_ADDR+0x1c8)
  635 00000000 43FAC1CC 
                       IOMUXC_SW_MUX_CTL_PAD_FEC_MDIO
                               EQU              (IOMUXC_BASE_ADDR+0x1cc)
  636 00000000 43FAC1D0 
                       IOMUXC_SW_MUX_CTL_PAD_FEC_TDATA0
                               EQU              (IOMUXC_BASE_ADDR+0x1d0)
  637 00000000 43FAC1D4 
                       IOMUXC_SW_MUX_CTL_PAD_FEC_TDATA1
                               EQU              (IOMUXC_BASE_ADDR+0x1d4)
  638 00000000 43FAC1D8 
                       IOMUXC_SW_MUX_CTL_PAD_FEC_TX_EN
                               EQU              (IOMUXC_BASE_ADDR+0x1d8)
  639 00000000 43FAC1DC 
                       IOMUXC_SW_MUX_CTL_PAD_FEC_RDATA0
                               EQU              (IOMUXC_BASE_ADDR+0x1dc)
  640 00000000 43FAC1E0 
                       IOMUXC_SW_MUX_CTL_PAD_FEC_RDATA1
                               EQU              (IOMUXC_BASE_ADDR+0x1e0)
  641 00000000 43FAC1E4 
                       IOMUXC_SW_MUX_CTL_PAD_FEC_RX_DV
                               EQU              (IOMUXC_BASE_ADDR+0x1e4)
  642 00000000 43FAC1E8 
                       IOMUXC_SW_MUX_CTL_PAD_FEC_TX_CLK
                               EQU              (IOMUXC_BASE_ADDR+0x1e8)
  643 00000000 43FAC1EC 
                       IOMUXC_SW_MUX_CTL_PAD_RTCK
                               EQU              (IOMUXC_BASE_ADDR+0x1ec)
  644 00000000 43FAC1F0 
                       IOMUXC_SW_MUX_CTL_PAD_DE_B
                               EQU              (IOMUXC_BASE_ADDR+0x1f0)



ARM Macro Assembler    Page 50 


  645 00000000 43FAC1F4 
                       IOMUXC_SW_MUX_CTL_PAD_GPIO_A
                               EQU              (IOMUXC_BASE_ADDR+0x1f4)
  646 00000000 43FAC1F8 
                       IOMUXC_SW_MUX_CTL_PAD_GPIO_B
                               EQU              (IOMUXC_BASE_ADDR+0x1f8)
  647 00000000 43FAC1FC 
                       IOMUXC_SW_MUX_CTL_PAD_GPIO_C
                               EQU              (IOMUXC_BASE_ADDR+0x1fc)
  648 00000000 43FAC200 
                       IOMUXC_SW_MUX_CTL_PAD_GPIO_D
                               EQU              (IOMUXC_BASE_ADDR+0x200)
  649 00000000 43FAC204 
                       IOMUXC_SW_MUX_CTL_PAD_GPIO_E
                               EQU              (IOMUXC_BASE_ADDR+0x204)
  650 00000000 43FAC208 
                       IOMUXC_SW_MUX_CTL_PAD_GPIO_F
                               EQU              (IOMUXC_BASE_ADDR+0x208)
  651 00000000 43FAC20C 
                       IOMUXC_SW_MUX_CTL_PAD_EXT_ARMCLK
                               EQU              (IOMUXC_BASE_ADDR+0x20c)
  652 00000000 43FAC210 
                       IOMUXC_SW_MUX_CTL_PAD_UPLL_BYPCLK
                               EQU              (IOMUXC_BASE_ADDR+0x210)
  653 00000000 43FAC214 
                       IOMUXC_SW_MUX_CTL_PAD_VSTBY_REQ
                               EQU              (IOMUXC_BASE_ADDR+0x214)
  654 00000000 43FAC218 
                       IOMUXC_SW_MUX_CTL_PAD_VSTBY_ACK
                               EQU              (IOMUXC_BASE_ADDR+0x218)
  655 00000000 43FAC21C 
                       IOMUXC_SW_MUX_CTL_PAD_POWER_FAIL
                               EQU              (IOMUXC_BASE_ADDR+0x21c)
  656 00000000 43FAC220 
                       IOMUXC_SW_MUX_CTL_PAD_CLKO
                               EQU              (IOMUXC_BASE_ADDR+0x220)
  657 00000000 43FAC224 
                       IOMUXC_SW_MUX_CTL_PAD_BOOT_MODE0
                               EQU              (IOMUXC_BASE_ADDR+0x224)
  658 00000000 43FAC228 
                       IOMUXC_SW_MUX_CTL_PAD_BOOT_MODE1
                               EQU              (IOMUXC_BASE_ADDR+0x228)
  659 00000000         
  660 00000000 43FAC22C 
                       IOMUXC_SW_PAD_CTL_PAD_A13
                               EQU              (IOMUXC_BASE_ADDR+0x22c)
  661 00000000 43FAC230 
                       IOMUXC_SW_PAD_CTL_PAD_A14
                               EQU              (IOMUXC_BASE_ADDR+0x230)
  662 00000000 43FAC234 
                       IOMUXC_SW_PAD_CTL_PAD_A15
                               EQU              (IOMUXC_BASE_ADDR+0x234)
  663 00000000 43FAC238 
                       IOMUXC_SW_PAD_CTL_PAD_A17
                               EQU              (IOMUXC_BASE_ADDR+0x238)
  664 00000000 43FAC23C 
                       IOMUXC_SW_PAD_CTL_PAD_A18
                               EQU              (IOMUXC_BASE_ADDR+0x23c)
  665 00000000 43FAC240 



ARM Macro Assembler    Page 51 


                       IOMUXC_SW_PAD_CTL_PAD_A19
                               EQU              (IOMUXC_BASE_ADDR+0x240)
  666 00000000 43FAC244 
                       IOMUXC_SW_PAD_CTL_PAD_A20
                               EQU              (IOMUXC_BASE_ADDR+0x244)
  667 00000000 43FAC248 
                       IOMUXC_SW_PAD_CTL_PAD_A21
                               EQU              (IOMUXC_BASE_ADDR+0x248)
  668 00000000 43FAC24C 
                       IOMUXC_SW_PAD_CTL_PAD_A23
                               EQU              (IOMUXC_BASE_ADDR+0x24c)
  669 00000000 43FAC250 
                       IOMUXC_SW_PAD_CTL_PAD_A24
                               EQU              (IOMUXC_BASE_ADDR+0x250)
  670 00000000 43FAC254 
                       IOMUXC_SW_PAD_CTL_PAD_A25
                               EQU              (IOMUXC_BASE_ADDR+0x254)
  671 00000000 43FAC258 
                       IOMUXC_SW_PAD_CTL_PAD_EB0
                               EQU              (IOMUXC_BASE_ADDR+0x258)
  672 00000000 43FAC25C 
                       IOMUXC_SW_PAD_CTL_PAD_EB1
                               EQU              (IOMUXC_BASE_ADDR+0x25c)
  673 00000000 43FAC260 
                       IOMUXC_SW_PAD_CTL_PAD_OE
                               EQU              (IOMUXC_BASE_ADDR+0x260)
  674 00000000 43FAC264 
                       IOMUXC_SW_PAD_CTL_PAD_CS4
                               EQU              (IOMUXC_BASE_ADDR+0x264)
  675 00000000 43FAC268 
                       IOMUXC_SW_PAD_CTL_PAD_CS5
                               EQU              (IOMUXC_BASE_ADDR+0x268)
  676 00000000 43FAC26C 
                       IOMUXC_SW_PAD_CTL_PAD_NF_CE0
                               EQU              (IOMUXC_BASE_ADDR+0x26c)
  677 00000000 43FAC270 
                       IOMUXC_SW_PAD_CTL_PAD_ECB
                               EQU              (IOMUXC_BASE_ADDR+0x270)
  678 00000000 43FAC274 
                       IOMUXC_SW_PAD_CTL_PAD_LBA
                               EQU              (IOMUXC_BASE_ADDR+0x274)
  679 00000000 43FAC278 
                       IOMUXC_SW_PAD_CTL_PAD_RW
                               EQU              (IOMUXC_BASE_ADDR+0x278)
  680 00000000 43FAC27C 
                       IOMUXC_SW_PAD_CTL_PAD_NFRB
                               EQU              (IOMUXC_BASE_ADDR+0x27c)
  681 00000000 43FAC280 
                       IOMUXC_SW_PAD_CTL_PAD_D15
                               EQU              (IOMUXC_BASE_ADDR+0x280)
  682 00000000 43FAC284 
                       IOMUXC_SW_PAD_CTL_PAD_D14
                               EQU              (IOMUXC_BASE_ADDR+0x284)
  683 00000000 43FAC288 
                       IOMUXC_SW_PAD_CTL_PAD_D13
                               EQU              (IOMUXC_BASE_ADDR+0x288)
  684 00000000 43FAC28C 
                       IOMUXC_SW_PAD_CTL_PAD_D12
                               EQU              (IOMUXC_BASE_ADDR+0x28c)



ARM Macro Assembler    Page 52 


  685 00000000 43FAC290 
                       IOMUXC_SW_PAD_CTL_PAD_D11
                               EQU              (IOMUXC_BASE_ADDR+0x290)
  686 00000000 43FAC294 
                       IOMUXC_SW_PAD_CTL_PAD_D10
                               EQU              (IOMUXC_BASE_ADDR+0x294)
  687 00000000 43FAC298 
                       IOMUXC_SW_PAD_CTL_PAD_D9
                               EQU              (IOMUXC_BASE_ADDR+0x298)
  688 00000000 43FAC29C 
                       IOMUXC_SW_PAD_CTL_PAD_D8
                               EQU              (IOMUXC_BASE_ADDR+0x29c)
  689 00000000 43FAC2A0 
                       IOMUXC_SW_PAD_CTL_PAD_D7
                               EQU              (IOMUXC_BASE_ADDR+0x2a0)
  690 00000000 43FAC2A4 
                       IOMUXC_SW_PAD_CTL_PAD_D6
                               EQU              (IOMUXC_BASE_ADDR+0x2a4)
  691 00000000 43FAC2A8 
                       IOMUXC_SW_PAD_CTL_PAD_D5
                               EQU              (IOMUXC_BASE_ADDR+0x2a8)
  692 00000000 43FAC2AC 
                       IOMUXC_SW_PAD_CTL_PAD_D4
                               EQU              (IOMUXC_BASE_ADDR+0x2ac)
  693 00000000 43FAC2B0 
                       IOMUXC_SW_PAD_CTL_PAD_D3
                               EQU              (IOMUXC_BASE_ADDR+0x2b0)
  694 00000000 43FAC2B4 
                       IOMUXC_SW_PAD_CTL_PAD_D2
                               EQU              (IOMUXC_BASE_ADDR+0x2b4)
  695 00000000 43FAC2B8 
                       IOMUXC_SW_PAD_CTL_PAD_D1
                               EQU              (IOMUXC_BASE_ADDR+0x2b8)
  696 00000000 43FAC2BC 
                       IOMUXC_SW_PAD_CTL_PAD_D0
                               EQU              (IOMUXC_BASE_ADDR+0x2bc)
  697 00000000 43FAC2C0 
                       IOMUXC_SW_PAD_CTL_PAD_LD0
                               EQU              (IOMUXC_BASE_ADDR+0x2c0)
  698 00000000 43FAC2C4 
                       IOMUXC_SW_PAD_CTL_PAD_LD1
                               EQU              (IOMUXC_BASE_ADDR+0x2c4)
  699 00000000 43FAC2C8 
                       IOMUXC_SW_PAD_CTL_PAD_LD2
                               EQU              (IOMUXC_BASE_ADDR+0x2c8)
  700 00000000 43FAC2CC 
                       IOMUXC_SW_PAD_CTL_PAD_LD3
                               EQU              (IOMUXC_BASE_ADDR+0x2cc)
  701 00000000 43FAC2D0 
                       IOMUXC_SW_PAD_CTL_PAD_LD4
                               EQU              (IOMUXC_BASE_ADDR+0x2d0)
  702 00000000 43FAC2D4 
                       IOMUXC_SW_PAD_CTL_PAD_LD5
                               EQU              (IOMUXC_BASE_ADDR+0x2d4)
  703 00000000 43FAC2D8 
                       IOMUXC_SW_PAD_CTL_PAD_LD6
                               EQU              (IOMUXC_BASE_ADDR+0x2d8)
  704 00000000 43FAC2DC 
                       IOMUXC_SW_PAD_CTL_PAD_LD7



ARM Macro Assembler    Page 53 


                               EQU              (IOMUXC_BASE_ADDR+0x2dc)
  705 00000000 43FAC2E0 
                       IOMUXC_SW_PAD_CTL_PAD_LD8
                               EQU              (IOMUXC_BASE_ADDR+0x2e0)
  706 00000000 43FAC2E4 
                       IOMUXC_SW_PAD_CTL_PAD_LD9
                               EQU              (IOMUXC_BASE_ADDR+0x2e4)
  707 00000000 43FAC2E8 
                       IOMUXC_SW_PAD_CTL_PAD_LD10
                               EQU              (IOMUXC_BASE_ADDR+0x2e8)
  708 00000000 43FAC2EC 
                       IOMUXC_SW_PAD_CTL_PAD_LD11
                               EQU              (IOMUXC_BASE_ADDR+0x2ec)
  709 00000000 43FAC2F0 
                       IOMUXC_SW_PAD_CTL_PAD_LD12
                               EQU              (IOMUXC_BASE_ADDR+0x2f0)
  710 00000000 43FAC2F4 
                       IOMUXC_SW_PAD_CTL_PAD_LD13
                               EQU              (IOMUXC_BASE_ADDR+0x2f4)
  711 00000000 43FAC2F8 
                       IOMUXC_SW_PAD_CTL_PAD_LD14
                               EQU              (IOMUXC_BASE_ADDR+0x2f8)
  712 00000000 43FAC2FC 
                       IOMUXC_SW_PAD_CTL_PAD_LD15
                               EQU              (IOMUXC_BASE_ADDR+0x2fc)
  713 00000000 43FAC300 
                       IOMUXC_SW_PAD_CTL_PAD_HSYNC
                               EQU              (IOMUXC_BASE_ADDR+0x300)
  714 00000000 43FAC304 
                       IOMUXC_SW_PAD_CTL_PAD_VSYNC
                               EQU              (IOMUXC_BASE_ADDR+0x304)
  715 00000000 43FAC308 
                       IOMUXC_SW_PAD_CTL_PAD_LSCLK
                               EQU              (IOMUXC_BASE_ADDR+0x308)
  716 00000000 43FAC30C 
                       IOMUXC_SW_PAD_CTL_PAD_OE_ACD
                               EQU              (IOMUXC_BASE_ADDR+0x30c)
  717 00000000 43FAC310 
                       IOMUXC_SW_PAD_CTL_PAD_CONTRAST
                               EQU              (IOMUXC_BASE_ADDR+0x310)
  718 00000000 43FAC314 
                       IOMUXC_SW_PAD_CTL_PAD_PWM
                               EQU              (IOMUXC_BASE_ADDR+0x314)
  719 00000000 43FAC318 
                       IOMUXC_SW_PAD_CTL_PAD_CSI_D2
                               EQU              (IOMUXC_BASE_ADDR+0x318)
  720 00000000 43FAC31C 
                       IOMUXC_SW_PAD_CTL_PAD_CSI_D3
                               EQU              (IOMUXC_BASE_ADDR+0x31c)
  721 00000000 43FAC320 
                       IOMUXC_SW_PAD_CTL_PAD_CSI_D4
                               EQU              (IOMUXC_BASE_ADDR+0x320)
  722 00000000 43FAC324 
                       IOMUXC_SW_PAD_CTL_PAD_CSI_D5
                               EQU              (IOMUXC_BASE_ADDR+0x324)
  723 00000000 43FAC328 
                       IOMUXC_SW_PAD_CTL_PAD_CSI_D6
                               EQU              (IOMUXC_BASE_ADDR+0x328)
  724 00000000 43FAC32C 



ARM Macro Assembler    Page 54 


                       IOMUXC_SW_PAD_CTL_PAD_CSI_D7
                               EQU              (IOMUXC_BASE_ADDR+0x32c)
  725 00000000 43FAC330 
                       IOMUXC_SW_PAD_CTL_PAD_CSI_D8
                               EQU              (IOMUXC_BASE_ADDR+0x330)
  726 00000000 43FAC334 
                       IOMUXC_SW_PAD_CTL_PAD_CSI_D9
                               EQU              (IOMUXC_BASE_ADDR+0x334)
  727 00000000 43FAC338 
                       IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK
                               EQU              (IOMUXC_BASE_ADDR+0x338)
  728 00000000 43FAC33C 
                       IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC
                               EQU              (IOMUXC_BASE_ADDR+0x33c)
  729 00000000 43FAC340 
                       IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC
                               EQU              (IOMUXC_BASE_ADDR+0x340)
  730 00000000 43FAC344 
                       IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK
                               EQU              (IOMUXC_BASE_ADDR+0x344)
  731 00000000 43FAC348 
                       IOMUXC_SW_PAD_CTL_PAD_I2C1_CLK
                               EQU              (IOMUXC_BASE_ADDR+0x348)
  732 00000000 43FAC34C 
                       IOMUXC_SW_PAD_CTL_PAD_I2C1_DAT
                               EQU              (IOMUXC_BASE_ADDR+0x34c)
  733 00000000 43FAC350 
                       IOMUXC_SW_PAD_CTL_PAD_CSPI1_MOSI
                               EQU              (IOMUXC_BASE_ADDR+0x350)
  734 00000000 43FAC354 
                       IOMUXC_SW_PAD_CTL_PAD_CSPI1_MISO
                               EQU              (IOMUXC_BASE_ADDR+0x354)
  735 00000000 43FAC358 
                       IOMUXC_SW_PAD_CTL_PAD_CSPI1_SS0
                               EQU              (IOMUXC_BASE_ADDR+0x358)
  736 00000000 43FAC35C 
                       IOMUXC_SW_PAD_CTL_PAD_CSPI1_SS1
                               EQU              (IOMUXC_BASE_ADDR+0x35c)
  737 00000000 43FAC360 
                       IOMUXC_SW_PAD_CTL_PAD_CSPI1_SCLK
                               EQU              (IOMUXC_BASE_ADDR+0x360)
  738 00000000 43FAC364 
                       IOMUXC_SW_PAD_CTL_PAD_CSPI1_RDY
                               EQU              (IOMUXC_BASE_ADDR+0x364)
  739 00000000 43FAC368 
                       IOMUXC_SW_PAD_CTL_PAD_UART1_RXD
                               EQU              (IOMUXC_BASE_ADDR+0x368)
  740 00000000 43FAC36C 
                       IOMUXC_SW_PAD_CTL_PAD_UART1_TXD
                               EQU              (IOMUXC_BASE_ADDR+0x36c)
  741 00000000 43FAC370 
                       IOMUXC_SW_PAD_CTL_PAD_UART1_RTS
                               EQU              (IOMUXC_BASE_ADDR+0x370)
  742 00000000 43FAC374 
                       IOMUXC_SW_PAD_CTL_PAD_UART1_CTS
                               EQU              (IOMUXC_BASE_ADDR+0x374)
  743 00000000 43FAC378 
                       IOMUXC_SW_PAD_CTL_PAD_UART2_RXD
                               EQU              (IOMUXC_BASE_ADDR+0x378)



ARM Macro Assembler    Page 55 


  744 00000000 43FAC37C 
                       IOMUXC_SW_PAD_CTL_PAD_UART2_TXD
                               EQU              (IOMUXC_BASE_ADDR+0x37c)
  745 00000000 43FAC380 
                       IOMUXC_SW_PAD_CTL_PAD_UART2_RTS
                               EQU              (IOMUXC_BASE_ADDR+0x380)
  746 00000000 43FAC384 
                       IOMUXC_SW_PAD_CTL_PAD_UART2_CTS
                               EQU              (IOMUXC_BASE_ADDR+0x384)
  747 00000000 43FAC388 
                       IOMUXC_SW_PAD_CTL_PAD_SD1_CMD
                               EQU              (IOMUXC_BASE_ADDR+0x388)
  748 00000000 43FAC38C 
                       IOMUXC_SW_PAD_CTL_PAD_SD1_CLK
                               EQU              (IOMUXC_BASE_ADDR+0x38c)
  749 00000000 43FAC390 
                       IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0
                               EQU              (IOMUXC_BASE_ADDR+0x390)
  750 00000000 43FAC394 
                       IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1
                               EQU              (IOMUXC_BASE_ADDR+0x394)
  751 00000000 43FAC398 
                       IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2
                               EQU              (IOMUXC_BASE_ADDR+0x398)
  752 00000000 43FAC39C 
                       IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3
                               EQU              (IOMUXC_BASE_ADDR+0x39c)
  753 00000000 43FAC3A0 
                       IOMUXC_SW_PAD_CTL_PAD_KPP_ROW0
                               EQU              (IOMUXC_BASE_ADDR+0x3a0)
  754 00000000 43FAC3A4 
                       IOMUXC_SW_PAD_CTL_PAD_KPP_ROW1
                               EQU              (IOMUXC_BASE_ADDR+0x3a4)
  755 00000000 43FAC3A8 
                       IOMUXC_SW_PAD_CTL_PAD_KPP_ROW2
                               EQU              (IOMUXC_BASE_ADDR+0x3a8)
  756 00000000 43FAC3AC 
                       IOMUXC_SW_PAD_CTL_PAD_KPP_ROW3
                               EQU              (IOMUXC_BASE_ADDR+0x3ac)
  757 00000000 43FAC3B0 
                       IOMUXC_SW_PAD_CTL_PAD_KPP_COL0
                               EQU              (IOMUXC_BASE_ADDR+0x3b0)
  758 00000000 43FAC3B4 
                       IOMUXC_SW_PAD_CTL_PAD_KPP_COL1
                               EQU              (IOMUXC_BASE_ADDR+0x3b4)
  759 00000000 43FAC3B8 
                       IOMUXC_SW_PAD_CTL_PAD_KPP_COL2
                               EQU              (IOMUXC_BASE_ADDR+0x3b8)
  760 00000000 43FAC3BC 
                       IOMUXC_SW_PAD_CTL_PAD_KPP_COL3
                               EQU              (IOMUXC_BASE_ADDR+0x3bc)
  761 00000000 43FAC3C0 
                       IOMUXC_SW_PAD_CTL_PAD_FEC_MDC
                               EQU              (IOMUXC_BASE_ADDR+0x3c0)
  762 00000000 43FAC3C4 
                       IOMUXC_SW_PAD_CTL_PAD_FEC_MDIO
                               EQU              (IOMUXC_BASE_ADDR+0x3c4)
  763 00000000 43FAC3C8 
                       IOMUXC_SW_PAD_CTL_PAD_FEC_TDATA0



ARM Macro Assembler    Page 56 


                               EQU              (IOMUXC_BASE_ADDR+0x3c8)
  764 00000000 43FAC3CC 
                       IOMUXC_SW_PAD_CTL_PAD_FEC_TDATA1
                               EQU              (IOMUXC_BASE_ADDR+0x3cc)
  765 00000000 43FAC3D0 
                       IOMUXC_SW_PAD_CTL_PAD_FEC_TX_EN
                               EQU              (IOMUXC_BASE_ADDR+0x3d0)
  766 00000000 43FAC3D4 
                       IOMUXC_SW_PAD_CTL_PAD_FEC_RDATA0
                               EQU              (IOMUXC_BASE_ADDR+0x3d4)
  767 00000000 43FAC3D8 
                       IOMUXC_SW_PAD_CTL_PAD_FEC_RDATA1
                               EQU              (IOMUXC_BASE_ADDR+0x3d8)
  768 00000000 43FAC3DC 
                       IOMUXC_SW_PAD_CTL_PAD_FEC_RX_DV
                               EQU              (IOMUXC_BASE_ADDR+0x3dc)
  769 00000000 43FAC3E0 
                       IOMUXC_SW_PAD_CTL_PAD_FEC_TX_CLK
                               EQU              (IOMUXC_BASE_ADDR+0x3e0)
  770 00000000 43FAC3E4 
                       IOMUXC_SW_PAD_CTL_PAD_RTCK
                               EQU              (IOMUXC_BASE_ADDR+0x3e4)
  771 00000000 43FAC3E8 
                       IOMUXC_SW_PAD_CTL_PAD_TDO
                               EQU              (IOMUXC_BASE_ADDR+0x3e8)
  772 00000000 43FAC3EC 
                       IOMUXC_SW_PAD_CTL_PAD_DE_B
                               EQU              (IOMUXC_BASE_ADDR+0x3ec)
  773 00000000 43FAC3F0 
                       IOMUXC_SW_PAD_CTL_PAD_GPIO_A
                               EQU              (IOMUXC_BASE_ADDR+0x3f0)
  774 00000000 43FAC3F4 
                       IOMUXC_SW_PAD_CTL_PAD_GPIO_B
                               EQU              (IOMUXC_BASE_ADDR+0x3f4)
  775 00000000 43FAC3F8 
                       IOMUXC_SW_PAD_CTL_PAD_GPIO_C
                               EQU              (IOMUXC_BASE_ADDR+0x3f8)
  776 00000000 43FAC3FC 
                       IOMUXC_SW_PAD_CTL_PAD_GPIO_D
                               EQU              (IOMUXC_BASE_ADDR+0x3fc)
  777 00000000 43FAC400 
                       IOMUXC_SW_PAD_CTL_PAD_GPIO_E
                               EQU              (IOMUXC_BASE_ADDR+0x400)
  778 00000000 43FAC404 
                       IOMUXC_SW_PAD_CTL_PAD_GPIO_F
                               EQU              (IOMUXC_BASE_ADDR+0x404)
  779 00000000 43FAC408 
                       IOMUXC_SW_PAD_CTL_PAD_VSTBY_REQ
                               EQU              (IOMUXC_BASE_ADDR+0x408)
  780 00000000 43FAC40C 
                       IOMUXC_SW_PAD_CTL_PAD_VSTBY_ACK
                               EQU              (IOMUXC_BASE_ADDR+0x40c)
  781 00000000 43FAC410 
                       IOMUXC_SW_PAD_CTL_PAD_POWER_FAIL
                               EQU              (IOMUXC_BASE_ADDR+0x410)
  782 00000000 43FAC414 
                       IOMUXC_SW_PAD_CTL_PAD_CLKO
                               EQU              (IOMUXC_BASE_ADDR+0x414)
  783 00000000         



ARM Macro Assembler    Page 57 


  784 00000000 43FAC418 
                       IOMUXC_SW_PAD_CTL_GRP_DVS_MISC
                               EQU              (IOMUXC_BASE_ADDR+0x418)
  785 00000000 43FAC41C 
                       IOMUXC_SW_PAD_CTL_GRP_DSE_FEC
                               EQU              (IOMUXC_BASE_ADDR+0x41c)
  786 00000000 43FAC420 
                       IOMUXC_SW_PAD_CTL_GRP_DVS_JTAG
                               EQU              (IOMUXC_BASE_ADDR+0x420)
  787 00000000 43FAC424 
                       IOMUXC_SW_PAD_CTL_GRP_DSE_NFC
                               EQU              (IOMUXC_BASE_ADDR+0x424)
  788 00000000 43FAC428 
                       IOMUXC_SW_PAD_CTL_GRP_DSE_CSI
                               EQU              (IOMUXC_BASE_ADDR+0x428)
  789 00000000 43FAC42C 
                       IOMUXC_SW_PAD_CTL_GRP_DSE_WEIM
                               EQU              (IOMUXC_BASE_ADDR+0x42c)
  790 00000000 43FAC430 
                       IOMUXC_SW_PAD_CTL_GRP_DSE_DDR
                               EQU              (IOMUXC_BASE_ADDR+0x430)
  791 00000000 43FAC434 
                       IOMUXC_SW_PAD_CTL_GRP_DVS_CRM
                               EQU              (IOMUXC_BASE_ADDR+0x434)
  792 00000000 43FAC438 
                       IOMUXC_SW_PAD_CTL_GRP_DSE_KPP
                               EQU              (IOMUXC_BASE_ADDR+0x438)
  793 00000000 43FAC43C 
                       IOMUXC_SW_PAD_CTL_GRP_DSE_SDHC1
                               EQU              (IOMUXC_BASE_ADDR+0x43c)
  794 00000000 43FAC440 
                       IOMUXC_SW_PAD_CTL_GRP_DSE_LCD
                               EQU              (IOMUXC_BASE_ADDR+0x440)
  795 00000000 43FAC444 
                       IOMUXC_SW_PAD_CTL_GRP_DSE_UART
                               EQU              (IOMUXC_BASE_ADDR+0x444)
  796 00000000 43FAC448 
                       IOMUXC_SW_PAD_CTL_GRP_DVS_NFC
                               EQU              (IOMUXC_BASE_ADDR+0x448)
  797 00000000 43FAC44C 
                       IOMUXC_SW_PAD_CTL_GRP_DVS_CSI
                               EQU              (IOMUXC_BASE_ADDR+0x44c)
  798 00000000 43FAC450 
                       IOMUXC_SW_PAD_CTL_GRP_DSE_CSPI1
                               EQU              (IOMUXC_BASE_ADDR+0x450)
  799 00000000 43FAC454 
                       IOMUXC_SW_PAD_CTL_GRP_DDRTYPE
                               EQU              (IOMUXC_BASE_ADDR+0x454)
  800 00000000 43FAC458 
                       IOMUXC_SW_PAD_CTL_GRP_DVS_SDHC1
                               EQU              (IOMUXC_BASE_ADDR+0x458)
  801 00000000 43FAC45C 
                       IOMUXC_SW_PAD_CTL_GRP_DVS_LCD
                               EQU              (IOMUXC_BASE_ADDR+0x45c)
  802 00000000         
  803 00000000 43FAC460 
                       IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x460)
  804 00000000 43FAC464 



ARM Macro Assembler    Page 58 


                       IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x464)
  805 00000000 43FAC468 
                       IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x468)
  806 00000000 43FAC46C 
                       IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x46c)
  807 00000000 43FAC470 
                       IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x470)
  808 00000000 43FAC474 
                       IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x474)
  809 00000000 43FAC478 
                       IOMUXC_AUDMUX_P7_INPUT_DA_AMX_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x478)
  810 00000000 43FAC47C 
                       IOMUXC_AUDMUX_P7_INPUT_TXFS_AMX_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x47c)
  811 00000000         
  812 00000000 43FAC480 
                       IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x480)
  813 00000000 43FAC484 
                       IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x484)
  814 00000000         
  815 00000000 43FAC488 
                       IOMUXC_CSI_IPP_CSI_D_0_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x488)
  816 00000000 43FAC48C 
                       IOMUXC_CSI_IPP_CSI_D_1_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x48c)
  817 00000000         
  818 00000000 43FAC490 
                       IOMUXC_CSPI1_IPP_IND_SS3_B_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x490)
  819 00000000 43FAC494 
                       IOMUXC_CSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x494)
  820 00000000 43FAC498 
                       IOMUXC_CSPI2_IPP_IND_DATAREADY_B_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x498)
  821 00000000 43FAC49C 
                       IOMUXC_CSPI2_IPP_IND_MISO_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x49c)
  822 00000000 43FAC4A0 
                       IOMUXC_CSPI2_IPP_IND_MOSI_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4a0)
  823 00000000 43FAC4A4 
                       IOMUXC_CSPI2_IPP_IND_SS0_B_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4a4)
  824 00000000 43FAC4A8 
                       IOMUXC_CSPI2_IPP_IND_SS1_B_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4a8)
  825 00000000 43FAC4AC 
                       IOMUXC_CSPI3_IPP_CSPI_CLK_IN_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4ac)



ARM Macro Assembler    Page 59 


  826 00000000 43FAC4B0 
                       IOMUXC_CSPI3_IPP_IND_DATAREADY_B_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4b0)
  827 00000000 43FAC4B4 
                       IOMUXC_CSPI3_IPP_IND_MISO_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4b4)
  828 00000000 43FAC4B8 
                       IOMUXC_CSPI3_IPP_IND_MOSI_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4b8)
  829 00000000 43FAC4BC 
                       IOMUXC_CSPI3_IPP_IND_SS0_B_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4bc)
  830 00000000 43FAC4C0 
                       IOMUXC_CSPI3_IPP_IND_SS1_B_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4c0)
  831 00000000 43FAC4C4 
                       IOMUXC_CSPI3_IPP_IND_SS2_B_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4c4)
  832 00000000 43FAC4C8 
                       IOMUXC_CSPI3_IPP_IND_SS3_B_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4c8)
  833 00000000         
  834 00000000 43FAC4CC 
                       IOMUXC_ESDHC1_IPP_DAT4_IN_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4cc)
  835 00000000 43FAC4D0 
                       IOMUXC_ESDHC1_IPP_DAT5_IN_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4d0)
  836 00000000 43FAC4D4 
                       IOMUXC_ESDHC1_IPP_DAT6_IN_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4d4)
  837 00000000 43FAC4D8 
                       IOMUXC_ESDHC1_IPP_DAT7_IN_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4d8)
  838 00000000 43FAC4DC 
                       IOMUXC_ESDHC2_IPP_CARD_CLK_IN_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4dc)
  839 00000000 43FAC4E0 
                       IOMUXC_ESDHC2_IPP_CMD_IN_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4e0)
  840 00000000 43FAC4E4 
                       IOMUXC_ESDHC2_IPP_DAT0_IN_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4e4)
  841 00000000 43FAC4E8 
                       IOMUXC_ESDHC2_IPP_DAT1_IN_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4e8)
  842 00000000 43FAC4EC 
                       IOMUXC_ESDHC2_IPP_DAT2_IN_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4ec)
  843 00000000 43FAC4F0 
                       IOMUXC_ESDHC2_IPP_DAT3_IN_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4f0)
  844 00000000 43FAC4F4 
                       IOMUXC_ESDHC2_IPP_DAT4_IN_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4f4)
  845 00000000 43FAC4F8 
                       IOMUXC_ESDHC2_IPP_DAT5_IN_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4f8)
  846 00000000 43FAC4FC 



ARM Macro Assembler    Page 60 


                       IOMUXC_ESDHC2_IPP_DAT6_IN_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x4fc)
  847 00000000 43FAC500 
                       IOMUXC_ESDHC2_IPP_DAT7_IN_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x500)
  848 00000000         
  849 00000000 43FAC504 
                       IOMUXC_FEC_FEC_COL_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x504)
  850 00000000 43FAC508 
                       IOMUXC_FEC_FEC_CRS_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x508)
  851 00000000 43FAC50C 
                       IOMUXC_FEC_FEC_RDATA_2_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x50c)
  852 00000000 43FAC510 
                       IOMUXC_FEC_FEC_RDATA_3_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x510)
  853 00000000 43FAC514 
                       IOMUXC_FEC_FEC_RX_CLK_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x514)
  854 00000000 43FAC518 
                       IOMUXC_FEC_FEC_RX_ER_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x518)
  855 00000000         
  856 00000000 43FAC51C 
                       IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x51c)
  857 00000000 43FAC520 
                       IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x520)
  858 00000000 43FAC524 
                       IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x524)
  859 00000000 43FAC528 
                       IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x528)
  860 00000000         
  861 00000000 43FAC52C 
                       IOMUXC_KPP_IPP_IND_COL_4_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x52c)
  862 00000000 43FAC530 
                       IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x530)
  863 00000000 43FAC534 
                       IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x534)
  864 00000000 43FAC538 
                       IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x538)
  865 00000000 43FAC53C 
                       IOMUXC_KPP_IPP_IND_ROW_4_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x53c)
  866 00000000 43FAC540 
                       IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x540)
  867 00000000 43FAC544 
                       IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x544)



ARM Macro Assembler    Page 61 


  868 00000000 43FAC548 
                       IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x548)
  869 00000000         
  870 00000000 43FAC54C 
                       IOMUXC_SIM1_PIN_SIM_RCVD1_IN_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x54c)
  871 00000000 43FAC550 
                       IOMUXC_SIM1_PIN_SIM_SIMPD1_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x550)
  872 00000000 43FAC554 
                       IOMUXC_SIM1_SIM_RCVD1_IO_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x554)
  873 00000000 43FAC558 
                       IOMUXC_SIM2_PIN_SIM_RCVD1_IN_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x558)
  874 00000000 43FAC55C 
                       IOMUXC_SIM2_PIN_SIM_SIMPD1_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x55c)
  875 00000000 43FAC560 
                       IOMUXC_SIM2_SIM_RCVD1_IO_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x560)
  876 00000000         
  877 00000000 43FAC564 
                       IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x564)
  878 00000000 43FAC568 
                       IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x568)
  879 00000000 43FAC56C 
                       IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x56c)
  880 00000000 43FAC570 
                       IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x570)
  881 00000000 43FAC574 
                       IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x574)
  882 00000000 43FAC578 
                       IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x578)
  883 00000000         
  884 00000000 43FAC57C 
                       IOMUXC_USB_TOP_IPP_IND_OTG_USB_OC_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x57c)
  885 00000000 43FAC580 
                       IOMUXC_USB_TOP_IPP_IND_UH2_USB_OC_SELECT_INPUT
                               EQU              (IOMUXC_BASE_ADDR+0x580)
  886 00000000         
  887 00000000         
  888 00000000         
  889 00000000         
  890 00000000         ;;------------------------------------------------------
                       ------------------------
  891 00000000         ;; REGISTER BIT WRITE VALUES
  892 00000000         ;;------------------------------------------------------
                       ------------------------
  893 00000000 00000000 
                       MUX_MODE_0



ARM Macro Assembler    Page 62 


                               EQU              0x0         ;;000: Select ALT0 
                                                            mux mode. (default)
                                                            
  894 00000000 00000001 
                       MUX_MODE_1
                               EQU              0x1         ;;001: Select ALT1 
                                                            mux mode.
  895 00000000 00000002 
                       MUX_MODE_2
                               EQU              0x2         ;;010: Select ALT2 
                                                            mux mode.
  896 00000000 00000003 
                       MUX_MODE_3
                               EQU              0x3         ;;011: Select ALT3 
                                                            mux mode.
  897 00000000 00000004 
                       MUX_MODE_4
                               EQU              0x4         ;;100: Select ALT4 
                                                            mux mode.
  898 00000000 00000005 
                       MUX_MODE_5
                               EQU              0x5         ;;101: Select ALT5 
                                                            mux mode(usually GP
                                                            IO).
  899 00000000 00000006 
                       MUX_MODE_6
                               EQU              0x6         ;;110: Select ALT6 
                                                            mux mode.
  900 00000000 00000007 
                       MUX_MODE_7
                               EQU              0x7         ;;111: Select ALT7 
                                                            mux mode (Trace).
  901 00000000 00000007 
                       MUX_MODE_TRACE
                               EQU              0x7         ;;111: Select ALT7 
                                                            mux mode (Trace).
  902 00000000         
  903 00000000         ;;------------------------------------------------------
                       ------------------------
  904 00000000         ;; Pin Configuration
  905 00000000         ;;------------------------------------------------------
                       ------------------------
  906 00000000         
  907 00000000 00002067 
                       TRACE_PAD_CTL_SETTING
                               EQU              0x00002067
  908 00000000 00000000 
                       IOMUXC_SW_PAD_CTL_GRP_DSE_DDR_SETTING
                               EQU              0x00000000  ;;Nominal Drive Str
                                                            ength for DDR Group
                                                             Pads
  909 00000000 00002007 
                       NOR_FLASH_PAD_CTL_SETTING
                               EQU              0x00002007
  910 00000000 00000040 
                       PAD_CTL_NOPULL_INPUT
                               EQU              0x00000040  ;No Pullups, No Hys
                                                            teresis, No Keeper
  911 00000000 000000E0 



ARM Macro Assembler    Page 63 


                       PAD_CTL_PULLUP_INPUT
                               EQU              0x000000E0  ;100k Pullup, No Hy
                                                            steresis
  912 00000000 000000C0 
                       PAD_CTL_PULLDW_INPUT
                               EQU              0x000000C0  ;100k Pull Down, No
                                                             Hysteresis
  913 00000000         
  914 00000000                 IF               :DEF: PROTO_HW
  998 00000000         
  999 00000000         ;FF2 Board GPIO Settings Used in Boot Only:
 1000 00000000         ;;----------------------------------------------------
 1001 00000000         ;GPIO1
 1002 00000000         ;      GPIO1_25   = FLASH_WP     - Output  - LOW
 1003 00000000         ;      GPIO1_24   = nBT_RESET     - Output  - LOW
 1004 00000000         ;      GPIO1_21   = BT_PWR_EN     - INPUT   - DISABLE PU
                       /PD
 1005 00000000         ;      GPIO1_8    = CSI_MCLK        - Output  - LOW
 1006 00000000         ;      GPIO1_5    = RED_ILL_CTRL    - Output  - LOW
 1007 00000000         ;      GPIO1_4    = PS_MODE     - INPUT
 1008 00000000         ;      GPIO1_3    = SHUTDOWN/BANK   - INPUT
 1009 00000000         ;      GPIO1_2    = BOOT_PWR_SEL    - INPUT
 1010 00000000         ;;----------------------------------------------------
 1011 00000000 03000120 
                       GPIO1_DIR_SETTING
                               EQU              0x03000120
 1012 00000000 00000000 
                       GPIO1_DR_SETTING
                               EQU              0x00000000
 1013 00000000         
 1014 00000000         ;;----------------------------------------------------
 1015 00000000         ;GPIO2
 1016 00000000         ;      GPIO2_31    = PWR_ENA        - Output  - LOW
 1017 00000000         ;      GPIO2_21    = BATT_LVL_EN    - Output  - LOW
 1018 00000000         ;      GPIO2_20    = uP_WAKE        - Output  - HIGH
 1019 00000000         ;      GPIO2_12    = KBD_SW_CNTRL   - Output  - HIGH
 1020 00000000         ;;----------------------------------------------------
 1021 00000000 80301000 
                       GPIO2_DIR_SETTING
                               EQU              0x80301000
 1022 00000000 80101000 
                       GPIO2_DR_SETTING
                               EQU              0x80101000
 1023 00000000         
 1024 00000000         ;;----------------------------------------------------
 1025 00000000         ;GPIO3
 1026 00000000         ;      GPIO3_24   = REED_SWITCH     - INPUT   - ENABLE P
                       U
 1027 00000000         ;      GPIO3_23   = FLASH_OUT       - INPUT   - ENABLE P
                       U
 1028 00000000         ;      GPIO3_19   = VIBRATE         - Output  - LOW
 1029 00000000         ;      GPIO3_18   = RED_LED         - Output  - LOW
 1030 00000000         ;      GPIO3_17   = GREEN_LED       - Output  - LOW
 1031 00000000         ;      GPIO3_16   = ISET2_SEL       - Output  - HIGH
 1032 00000000         ;      GPIO3_15   = ILL_ON          - Output  - LOW
 1033 00000000         ;      GPIO3_13   = LED_BOOST_PWM   - Output  - LOW
 1034 00000000         ;      GPIO3_12   = AIM_ON          - Output  - LOW
 1035 00000000         ;      GPIO3_10   = HWT5            - INPUT   - ENABLE P
                       U



ARM Macro Assembler    Page 64 


 1036 00000000         ;      GPIO3_9    = HWT4            - INPUT   - ENABLE P
                       U
 1037 00000000         ;      GPIO3_8    = HWT3            - INPUT   - ENABLE P
                       U
 1038 00000000         ;      GPIO3_7    = HWT2            - INPUT   - ENABLE P
                       U
 1039 00000000         ;      GPIO3_6    = HWT1            - INPUT   - ENABLE P
                       U
 1040 00000000         ;      GPIO3_5    = HWT0            - INPUT   - ENABLE P
                       U
 1041 00000000         ;      GPIO3_4    = KEY_CLK_OUT     - INPUT   - ENABLE P
                       U
 1042 00000000         ;      GPIO3_3    = nKEY_DATA_IN    - INPUT
 1043 00000000         ;      GPIO3_2    = TERM_CLK_OUT    - INPUT   - ENABLE P
                       U
 1044 00000000         ;      GPIO3_1    = nTERM_DATA_IN   - INPUT
 1045 00000000         ;      GPIO3_0    = ENG_RESET       - Output  - HIGH
 1046 00000000         ;;----------------------------------------------------
 1047 00000000 000FB001 
                       GPIO3_DIR_SETTING
                               EQU              0x000FB001
 1048 00000000 00010001 
                       GPIO3_DR_SETTING
                               EQU              0x00010001
 1049 00000000         
 1050 00000000         ;;----------------------------------------------------
 1051 00000000         ;GPIO4
 1052 00000000         ;      GPIO4_29   = AIM_CTRL        - Output  - LOW
 1053 00000000         ;      GPIO4_27   = UART2_TXD       - Output  - HIGH
 1054 00000000         ;      GPIO4_26   = UART2_RXD       - INPUT
 1055 00000000         ;      GPIO4_20   = n232/KBD_OE1    - INPUT
 1056 00000000         ;      GPIO4_19   = n232/KBD_OE2    - INPUT
 1057 00000000         ;      GPIO4_18   = n232/KBD_OE3    - INPUT
 1058 00000000         ;      GPIO4_17   = n232/KBD_OE4    - INPUT
 1059 00000000         ;      GPIO4_16   = HOST_PWR_GD     - INPUT   - ENABLE P
                       U
 1060 00000000         ;      GPIO4_15   = AUX_PWR_GD      - INPUT   - ENABLE P
                       U
 1061 00000000         ;      GPIO4_14   = CHG_STAT1       - INPUT   - ENABLE P
                       U
 1062 00000000         ;      GPIO4_13   = CHG_STAT2       - INPUT   - ENABLE P
                       U
 1063 00000000         ;      GPIO4_12   = nCHG_ENABLE     - INPUT   - ENABLE P
                       U
 1064 00000000         ;      GPIO4_11   = nSPI_FLASH_HOLD - Output  - HIGH
 1065 00000000         ;      GPIO4_10   = BT_READY        - INPUT   - ENABLE P
                       U
 1066 00000000         ;      GPIO4_9    = BT_CMD_DATA     - INPUT   - ENABLE P
                       U
 1067 00000000         ;      GPIO4_8    = BT_HOST_SLEEP   - INPUT   - ENABLE P
                       U
 1068 00000000         ;      GPIO4_7    = BT_HOST_WAKEUP  - INPUT   - ENABLE P
                       U
 1069 00000000         ;      GPIO4_6    = BT_CONNECTED    - INPUT   - ENABLE P
                       U
 1070 00000000         ;      GPIO4_5    = LASER_SHUTOFF   - Output  - HIGH
 1071 00000000         ;      GPIO4_4    = TRIG_uP         - INPUT
 1072 00000000         ;      GPIO4_3    = nBOOT           - INPUT
 1073 00000000         ;;----------------------------------------------------



ARM Macro Assembler    Page 65 


 1074 00000000 28000820 
                       GPIO4_DIR_SETTING
                               EQU              0x28000820
 1075 00000000 08000820 
                       GPIO4_DR_SETTING
                               EQU              0x08000820
 1076 00000000         
 1077 00000000         ;;------------------------------------------------------
                       ----------------
 1078 00000000         ;;------------------------------------------------------
                       ----------------
 1079 00000000         
 1080 00000000         ;OEM Board GPIO Settings Used in Boot Only:
 1081 00000000         ;;----------------------------------------------------
 1082 00000000         ;GPIO1
 1083 00000000         ;      GPIO1_25   = FLASH_WP     - Output  - LOW
 1084 00000000         ;      GPIO1_24   = (OEM None)     - Output  - LOW
 1085 00000000         ;      GPIO1_21   = (OEM None)     - INPUT   - DISABLE P
                       U/PD
 1086 00000000         ;      GPIO1_16   = nBEEPER_PWM  - Output  - HIGH (OEM)
 1087 00000000         ;      GPIO1_12   = nGREEN_LED  - Output  - HIGH (OEM)
 1088 00000000         ;      GPIO1_8    = CSI_MCLK        - Output  - LOW
 1089 00000000         ;      GPIO1_5    = (OEM None)     - Output  - LOW
 1090 00000000         ;      GPIO1_4    = PS_MODE      - INPUT   - (PU on by D
                       efault)
 1091 00000000         ;      GPIO1_3    = (OEM None)  - Output  - LOW
 1092 00000000         ;      GPIO1_2    = BOOT_PWR_SEL    - INPUT
 1093 00000000         ;;----------------------------------------------------
 1094 00000000 03011128 
                       GPIO1_DIR_OEM_SETTING
                               EQU              0x03011128
 1095 00000000 00011000 
                       GPIO1_DR_OEM_SETTING
                               EQU              0x00011000
 1096 00000000         
 1097 00000000         ;;----------------------------------------------------
 1098 00000000         ;GPIO2
 1099 00000000         ;      GPIO2_31    = PWR_ENA        - Output  - LOW
 1100 00000000         ;      GPIO2_29    = nSW_TRIG  - Output  - HIGH (OEM)
 1101 00000000         ;      GPIO2_21    = (OEM None)     - Output  - LOW
 1102 00000000         ;      GPIO2_20    = (OEM None)     - Output  - HIGH
 1103 00000000         ;      GPIO2_12    = (OEM None)     - Output  - HIGH
 1104 00000000         ;;----------------------------------------------------
 1105 00000000 A0301000 
                       GPIO2_DIR_OEM_SETTING
                               EQU              0xA0301000
 1106 00000000 20101000 
                       GPIO2_DR_OEM_SETTING
                               EQU              0x20101000
 1107 00000000         
 1108 00000000         ;;----------------------------------------------------
 1109 00000000         ;GPIO3
 1110 00000000         ;      GPIO3_31   = PWRDWN/nREADY   - Output  - HIGH (OE
                       M)
 1111 00000000         ;      GPIO3_24   = (OEM None)      - INPUT   - ENABLE P
                       U
 1112 00000000         ;      GPIO3_23   = FLASH_OUT       - INPUT   - ENABLE P
                       U
 1113 00000000         ;      GPIO3_19   = PS_MODE_Buck_Boost - Output  - LOW (



ARM Macro Assembler    Page 66 


                       OEM)
 1114 00000000         ;      GPIO3_18   = (OEM None)      - Output  - LOW
 1115 00000000         ;      GPIO3_17   = (OEM None)      - Output  - LOW
 1116 00000000         ;      GPIO3_16   = (OEM None)      - Output  - HIGH
 1117 00000000         ;      GPIO3_15   = ILL_ON          - Output  - LOW
 1118 00000000         ;      GPIO3_13   = (OEM None)      - Output  - LOW
 1119 00000000         ;      GPIO3_12   = AIM_ON          - Output  - LOW
 1120 00000000         ;    GPIO3_11   = uP_WAKE   - Output  - HIGH (OEM)
 1121 00000000         ;      GPIO3_10   = HWT5            - INPUT   - ENABLE P
                       U
 1122 00000000         ;      GPIO3_9    = HWT4            - INPUT   - ENABLE P
                       U
 1123 00000000         ;      GPIO3_8    = HWT3            - INPUT   - ENABLE P
                       U
 1124 00000000         ;      GPIO3_7    = HWT2            - INPUT   - ENABLE P
                       U
 1125 00000000         ;      GPIO3_6    = HWT1            - INPUT   - ENABLE P
                       U
 1126 00000000         ;      GPIO3_5    = HWT0            - INPUT   - ENABLE P
                       U
 1127 00000000         ;      GPIO3_4    = (OEM None)      - INPUT   - ENABLE P
                       U
 1128 00000000         ;      GPIO3_3    = nTRIG_uP     - INPUT   - (PU on by D
                       efault)
 1129 00000000         ;      GPIO3_2    = (OEM None)      - INPUT   - ENABLE P
                       U
 1130 00000000         ;      GPIO3_1    = (OEM None)      - INPUT   - (PU on b
                       y Default)
 1131 00000000         ;      GPIO3_0    = ENG_RESET       - Output  - LOW (OEM
                       )
 1132 00000000         ;;----------------------------------------------------
 1133 00000000 800FB801 
                       GPIO3_DIR_OEM_SETTING
                               EQU              0x800FB801
 1134 00000000 80010800 
                       GPIO3_DR_OEM_SETTING
                               EQU              0x80010800
 1135 00000000         
 1136 00000000         ;;----------------------------------------------------
 1137 00000000         ;GPIO4
 1138 00000000         ;      GPIO4_29   = UART1_POL       - Output  - HIGH (OE
                       M)
 1139 00000000         ;      GPIO4_27   = (OEM None)      - Output  - HIGH
 1140 00000000         ;      GPIO4_26   = (OEM None)       - INPUT  - (PU on b
                       y Default)
 1141 00000000         ;      GPIO4_20   = (OEM None)      - Output  - LOW
 1142 00000000         ;      GPIO4_19   = (OEM None)      - Output  - LOW
 1143 00000000         ;      GPIO4_18   = (OEM None)      - Output  - LOW
 1144 00000000         ;      GPIO4_17   = (OEM None)      - Output  - LOW
 1145 00000000         ;      GPIO4_16   = (OEM None)     - INPUT   - ENABLE PU
                       
 1146 00000000         ;      GPIO4_15   = (OEM None)      - INPUT   - ENABLE P
                       U
 1147 00000000         ;      GPIO4_14   = (OEM None)      - INPUT   - ENABLE P
                       U
 1148 00000000         ;      GPIO4_13   = (OEM None)      - INPUT   - ENABLE P
                       U
 1149 00000000         ;      GPIO4_12   = (OEM None)     - INPUT   - ENABLE PU
                       



ARM Macro Assembler    Page 67 


 1150 00000000         ;      GPIO4_11   = nSPI_FLASH_HOLD - Output  - HIGH
 1151 00000000         ;      GPIO4_10   = (OEM None)      - INPUT   - ENABLE P
                       U
 1152 00000000         ;      GPIO4_9    = (OEM None)      - INPUT   - ENABLE P
                       U
 1153 00000000         ;      GPIO4_8    = (OEM None)    - INPUT   - ENABLE PU
 1154 00000000         ;      GPIO4_7    = (OEM None)   - INPUT   - ENABLE PU
 1155 00000000         ;      GPIO4_6    = (OEM None)     - INPUT   - ENABLE PU
                       
 1156 00000000         ;      GPIO4_5    = (OEM None)    - Output  - HIGH
 1157 00000000         ;      GPIO4_4    = (OEM None)      - Output  - LOW
 1158 00000000         ;      GPIO4_3    = nBOOT           - INPUT
 1159 00000000         ;;----------------------------------------------------
 1160 00000000 281E0830 
                       GPIO4_DIR_OEM_SETTING
                               EQU              0x281E0830
 1161 00000000 28000820 
                       GPIO4_DR_OEM_SETTING
                               EQU              0x28000820
 1162 00000000         
 1163 00000000                 ENDIF                        ;
 1164 00000000         
 1165 00000000                 END
  104 00000000                 ELSE
  114                          ENDIF
  115 00000000         
  116 00000000         ;;******************************************************
                       *******************
  117 00000000         
  118 00000000         ;;******************************************************
                       *******************
  119 00000000         ;; Macros and common stuff
  120 00000000         ;;******************************************************
                       *******************
  121 00000000         ;;
  122 00000000         
  123 00000000         ;;
  124 00000000         ;; generic bit mask defines
  125 00000000         ;;
  126 00000000 00000001 
                       BIT0    EQU              0x00000001
  127 00000000 00000002 
                       BIT1    EQU              0x00000002
  128 00000000 00000004 
                       BIT2    EQU              0x00000004
  129 00000000 00000008 
                       BIT3    EQU              0x00000008
  130 00000000 00000010 
                       BIT4    EQU              0x00000010
  131 00000000 00000020 
                       BIT5    EQU              0x00000020
  132 00000000 00000040 
                       BIT6    EQU              0x00000040
  133 00000000 00000080 
                       BIT7    EQU              0x00000080
  134 00000000 00000100 
                       BIT8    EQU              0x00000100
  135 00000000 00000200 
                       BIT9    EQU              0x00000200



ARM Macro Assembler    Page 68 


  136 00000000 00000400 
                       BIT10   EQU              0x00000400
  137 00000000 00000800 
                       BIT11   EQU              0x00000800
  138 00000000 00001000 
                       BIT12   EQU              0x00001000
  139 00000000 00002000 
                       BIT13   EQU              0x00002000
  140 00000000 00004000 
                       BIT14   EQU              0x00004000
  141 00000000 00008000 
                       BIT15   EQU              0x00008000
  142 00000000 00010000 
                       BIT16   EQU              0x00010000
  143 00000000 00020000 
                       BIT17   EQU              0x00020000
  144 00000000 00040000 
                       BIT18   EQU              0x00040000
  145 00000000 00080000 
                       BIT19   EQU              0x00080000
  146 00000000 00100000 
                       BIT20   EQU              0x00100000
  147 00000000 00200000 
                       BIT21   EQU              0x00200000
  148 00000000 00400000 
                       BIT22   EQU              0x00400000
  149 00000000 00800000 
                       BIT23   EQU              0x00800000
  150 00000000 01000000 
                       BIT24   EQU              0x01000000
  151 00000000 02000000 
                       BIT25   EQU              0x02000000
  152 00000000 04000000 
                       BIT26   EQU              0x04000000
  153 00000000 08000000 
                       BIT27   EQU              0x08000000
  154 00000000 10000000 
                       BIT28   EQU              0x10000000
  155 00000000 20000000 
                       BIT29   EQU              0x20000000
  156 00000000 40000000 
                       BIT30   EQU              0x40000000
  157 00000000 80000000 
                       BIT31   EQU              0x80000000
  158 00000000         
  159 00000000         ;;
  160 00000000         ;; RESET_WATCHDOG_TIMER macro is made to accommodate rel
                       ocatable code.  We do this by loading constants with no 
                       more than 8 contiguous bits set
  161 00000000         ;; at a time, in order to accommodate the 8 bit constant
                        maximum.
  162 00000000         ;;
  163 00000000                 MACRO
  164 00000000                 RESET_WATCHDOG_TIMER
  165 00000000                 stmdb            sp!,{r0-r1} ;; Save registers
  166 00000000         
  167 00000000                 ldr              r0,=WATCHDOG_BASE_ADDR_UPPER ;;
                                                             To get WSR address
                                                             into r0, add one b



ARM Macro Assembler    Page 69 


                                                            yte at a time to ac
                                                            commodate 8 bit con
                                                            stant maximum
  168 00000000                 ldr              r1,=WATCHDOG_BASE_ADDR_LOWER
  169 00000000                 add              r0,r0,r1
  170 00000000                 ldr              r1,=WATCHDOG_BASE_ADDR_WSR_OFFS
ET
  171 00000000                 add              r0,r0,r1
  172 00000000         
  173 00000000                 ldr              r1,=0x5500
  174 00000000                 add              r1,r1,#0x0055
  175 00000000         
  176 00000000                 IF               platform_current = "mxl"
  177 00000000         
  178 00000000                 str              r1,[r0]     ;; Write 0x5555 to 
                                                            start the reset seq
                                                            uence.  Build comma
                                                            nd one byte at a ti
                                                            me to accommodate 8
                                                             bit constant maxim
                                                            um
  179 00000000         
  180 00000000                 add              r1,r1,r1
  181 00000000                 str              r1,[r0]     ;; Write 0xAAAA to 
                                                            start the reset seq
                                                            uence.  Build comma
                                                            nd one byte at a ti
                                                            me to accommodate 8
                                                             bit constant maxim
                                                            um
  182 00000000         
  183 00000000                 ELSE
  184 00000000                 IF               ((platform_current = "imx27") |
| (platform_current = "imx25"))
  185 00000000         
  186 00000000                 strh             r1,[r0]     ;; Write 0x5555 to 
                                                            start the reset seq
                                                            uence.  Build comma
                                                            nd one byte at a ti
                                                            me to accommodate 8
                                                             bit constant maxim
                                                            um
  187 00000000         
  188 00000000                 add              r1,r1,r1
  189 00000000                 strh             r1,[r0]     ;; Write 0xAAAA to 
                                                            start the reset seq
                                                            uence.  Build comma
                                                            nd one byte at a ti
                                                            me to accommodate 8
                                                             bit constant maxim
                                                            um
  190 00000000         
  191 00000000                 ENDIF
  192 00000000                 ENDIF
  193 00000000         
  194 00000000                 ldmia            sp!,{r0-r1} ;; Restore register
                                                            s
  195 00000000                 MEND
  196 00000000         



ARM Macro Assembler    Page 70 


  197 00000000         
  198 00000000         ;; FORCE_WATCHDOG_RESET macro is made to accommodate rel
                       ocatable code.  We do this by loading constants with no 
                       more than 8 contiguous bits set
  199 00000000         ;; at a time, in order to accommodate the 8 bit constant
                        maximum and make this code relocatable.
  200 00000000         ;; Watchdog must be enabled before calling this function
                        (one time only write the bit to enable DOG on the imx27
                        platform).
  201 00000000         ;;
  202 00000000                 MACRO
  203 00000000                 FORCE_WATCHDOG_RESET
  204 00000000         
  205 00000000                 stmdb            sp!,{r0-r1} ;; Save registers
  206 00000000         
  207 00000000                 ldr              r0,=WATCHDOG_BASE_ADDR_UPPER ;;
                                                             To get WCR address
                                                             into r0, add one b
                                                            yte at a time to ac
                                                            commodate 8 bit con
                                                            stant maximum
  208 00000000                 ldr              r1,=WATCHDOG_BASE_ADDR_LOWER
  209 00000000                 add              r0,r0,r1
  210 00000000         
  211 00000000                 ldr              r1,=0x0100  ;; Write bit 8 to c
                                                            ause the timer to e
                                                            xpire right away (s
                                                            hort time set).
  212 00000000         
  213 00000000                 IF               platform_current = "mxl"
  214 00000000         
  215 00000000                 str              r1,[r0]
  216 00000000         
  217 00000000                 ELSE
  218 00000000                 IF               ((platform_current = "imx27") |
| (platform_current = "imx25"))
  219 00000000         
  220 00000000                 strh             r1,[r0]
  221 00000000         
  222 00000000                 ENDIF
  223 00000000                 ENDIF
  224 00000000         
  225 00000000                 b                {PC}        ;;; Keep looping un
                                                            til we reset, branc
                                                            hing to same locati
                                                            on
  226 00000000         
  227 00000000                 ldmia            sp!,{r0-r1} ;; Restore register
                                                            s (we should have r
                                                            eset before we arri
                                                            ved here).
  228 00000000                 MEND
  229 00000000         
  230 00000000         
  231 00000000         
  232 00000000         
  233 00000000                 END
   15 00000000         
   16 00000000                 EXPORT           Fast_memcpy



ARM Macro Assembler    Page 71 


   17 00000000                 EXPORT           Set_ram_to_zero
   18 00000000                 EXPORT           Test_ram_memory
   19 00000000         
   20 00000000                 IF               ((platform_current = "imx25") |
| (platform_current = "imx27"))
   21 00000000                 EXPORT           Init_ddr_sdram
   22 00000000                 EXPORT           WhatIsMemSizeMB
   23 00000000                 EXPORT           DRAM1GIG
   24 00000000                 EXPORT           DRAM256M
   25 00000000                 EXPORT           DRAM128M
   26 00000000         
   27 00000000                 ELSE                         ;;mxl
   33                          ENDIF
   34 00000000         
   35 00000000         ;IMPORT Send_Address_in_r0   ;;used for debug
   36 00000000         
   37 00000000                 AREA             MEMCFG, CODE, READONLY
   38 00000000         
   39 00000000         ;;
   40 00000000         ;;******************************************************
                       ************************************************
   41 00000000                 IF               ((platform_current = "imx25") |
| (platform_current = "imx27")) 
                                                            ;;DDR memory config
                                                            uration routine
   42 00000000         ;;******************************************************
                       ************************************************
   43 00000000         ;;
   44 00000000         
   45 00000000         ;;
   46 00000000         ;;******************************************************
                       ************************************************
   47 00000000                 IF               Board_TARGET = "iMX27_Developme
nt" 
                                                            ;;Use settings for 
                                                            32 bit wide bus (tw
                                                            o mem chips)
   70                          ENDIF                        ;;END of DDR memory
                                                             configuration data
                                                             section Board_TARG
                                                            ET = "iMX27_Develop
                                                            ment"
   71 00000000         ;;******************************************************
                       ************************************************
   72 00000000         ;;
   73 00000000         ;;
   74 00000000         ;;******************************************************
                       ************************************************
   75 00000000                 IF               (Board_TARGET = "iMX27_FF1") ;;
                                                            Use settings for 16
                                                             bit wide bus (one 
                                                            mem chip)
   97                          ENDIF                        ;;END of DDR memory
                                                             configuration data
                                                             section ((Board_TA
                                                            RGET = "iMX27_FF1")
                                                             || (Board_TARGET =
                                                             "iMX25_Development
                                                            "))



ARM Macro Assembler    Page 72 


   98 00000000         ;;******************************************************
                       ************************************************
   99 00000000         ;;
  100 00000000         
  101 00000000         ;;
  102 00000000         ;;******************************************************
                       ************************************************
  103 00000000                 IF               ((Board_TARGET = "iMX25_Gen6_Bo
ard") || (Board_TARGET = "iMX25_Development")|| (Board_TARGET = "iMX25_OEM")) 
                                                            ;;Use settings for 
                                                            16 bit wide bus (on
                                                            e mem chip)
  104 00000000         ;;******************************************************
                       ************************************************
  105 00000000 80000000 
                       SDRAM_CSD_0_BASE
                               EQU              CSD0_BASE_ADDR ;; CSD0 base add
                                                            ress 0x80000000
  106 00000000 10000000 
                       SMODE_PRE_CH
                               EQU              0x10000000  ;; bit mask or prec
                                                            harge mode
  107 00000000 20000000 
                       SMODE_AUTO_RF
                               EQU              0x20000000  ;; bit mask for aut
                                                            o refresh
  108 00000000 30000000 
                       SMODE_LOAD_MR
                               EQU              0x30000000  ;; bit mask for loa
                                                            d register
  109 00000000 40000000 
                       SMODE_MAN_SR
                               EQU              0x40000000  ;; manual self refr
                                                            esh
  110 00000000 FFFF13FF 
                       REFRESH_DISABLE
                               EQU              (:NOT:((7<<13)+0xc00)) ;; bitma
                                                            sk to disable refre
                                                            sh
  111 00000000         
  112 00000000         ;;******************************************************
                       ************************************************
  113 00000000         ;;Use settings for 16 bit wide bus (one mem chip) with 1
                       28M size
  114 00000000         ;;******************************************************
                       ************************************************
  115 00000000         ;; 1Gb mobile ddr
  116 00000000 00295720 
                       ESDCONFIG_0_VAL11G
                               EQU              0x00295720  ;; CONGIG Register 
                                                            settings; tRC set t
                                                            o 20 clocks
  117 00000000 83218880 
                       NORMAL_MODE1G
                               EQU              0x83218880  ;; normal mode cont
                                                            rol settings (SMODE
                                                            =000)
  118 00000000 04000000 
                       EXTMODE1G



ARM Macro Assembler    Page 73 


                               EQU              0x04000000  ;; Bank address 0
  119 00000000         
  120 00000000         ;NORMAL_MODE1G   EQU 0x83218080     ;; normal mode contr
                       ol settings (SMODE=000), low power dissabled
  121 00000000         
  122 00000000         ;;******************************************************
                       ************************************************
  123 00000000         OEM                                  ;;Use settings for 
                                                            16 bit wide bus (on
                                                            e mem chip) with 32
                                                            M size
  124 00000000         ;;******************************************************
                       ************************************************
  125 00000000         ;;
  126 00000000 00095729 
                       ESDCONFIG_0_VAL1256
                               EQU              0x00095729  ;; CONGIG Register 
                                                            settings; tRC set t
                                                            o 20 clocks
  127 00000000 82116880 
                       NORMAL_MODE256
                               EQU              0x82116880  ;; normal mode cont
                                                            rol settings (SMODE
                                                            =000)
  128 00000000         
  129 00000000                 IF               :DEF: OEMBOOT
  132 00000000 01000000 
                       EXTMODE256
                               EQU              0x01000000  ;;Full Drive Streng
                                                            th Bank address 0
  133 00000000                 ENDIF
  134 00000000         ;NORMAL_MODE256  EQU 0x82116080     ;; normal mode contr
                       ol settings (SMODE=000), low power dissabled
  135 00000000         
  136 00000000         ;;******************************************************
                       ************************************************
  137 00000000         ;;Use settings for 16 bit wide bus (one mem chip) with 1
                       6M size
  138 00000000         ;;******************************************************
                       ************************************************
  139 00000000         ;;
  140 00000000         ;;ESDCONFIG_0_VAL1128 EQU 0x0029572f         ;; CONGIG R
                       egister settings; tRC set to 20 clocks
  141 00000000         ;;config Winbon 16M LPDDR Lincoln Lu@2011.10.18
  142 00000000 00095729 
                       ESDCONFIG_0_VAL1128
                               EQU              0x00095729  ;;for 133MHZ, set t
                                                            RC set to 10 clocks
                                                            , tRAS set to 6 clo
                                                            cks, tWR set to 2 c
                                                            locks, tMRD set to 
                                                            2 clocks, tRP set t
                                                            o 3 clocks, tWTR se
                                                            t to 1 clocks, tXP 
                                                            set to 1 clocks,
  143 00000000 81114880 
                       NORMAL_MODE128
                               EQU              0x81114880  ;; normal mode cont
                                                            rol settings (SMODE



ARM Macro Assembler    Page 74 


                                                            =000)
  144 00000000 00800000 
                       EXTMODE128
                               EQU              0x00800000  ;; Bank address 0
  145 00000000         
  146 00000000         ;NORMAL_MODE128  EQU 0x81114080         ;; normal mode c
                       ontrol settings (SMODE=000), low power dissabled
  147 00000000         
  148 00000000         ;;
  149 00000000         ;;******************************************************
                       ************************************************
  150 00000000                 ENDIF                        ;;END of DDR memory
                                                             configuration data
                                                             section Board_TARG
                                                            ET =
  151 00000000         ;;     "iMX25_Development", "iMX25_Gen6_Board"
  152 00000000         ;;******************************************************
                       ************************************************
  153 00000000         ;;
  154 00000000         DRAM128M
  155 00000000 81114880        DCD              NORMAL_MODE128 ;control registe
                                                            r value
  156 00000004 00095729        DCD              ESDCONFIG_0_VAL1128 ;config reg
                                                            ister value
  157 00000008 00000004        DCD              ESDMISC_VAL1 ;misc register val
                                                            ue
  158 0000000C 00000033        DCD              0x33        ;ddr mode register 
                                                            settings
  159 00000010 00800000        DCD              EXTMODE128  ;set BA1 for extend
                                                            ed mode reg all oth
                                                            er 0
  160 00000014         
  161 00000014         DRAM256M
  162 00000014 82116880        DCD              NORMAL_MODE256 ;control registe
                                                            r value
  163 00000018 00095729        DCD              ESDCONFIG_0_VAL1256 ;config reg
                                                            ister value
  164 0000001C 00000004        DCD              ESDMISC_VAL1 ;misc register val
                                                            ue
  165 00000020 00000033        DCD              0x33        ;ddr mode register 
                                                            settings
  166 00000024 01000000        DCD              EXTMODE256  ;set BA1 for extend
                                                            ed mode reg all oth
                                                            er 0
  167 00000028         
  168 00000028         DRAM1GIG
  169 00000028 83218880        DCD              NORMAL_MODE1G ;control register
                                                             value
  170 0000002C 00295720        DCD              ESDCONFIG_0_VAL11G ;config regi
                                                            ster value
  171 00000030 00000004        DCD              ESDMISC_VAL1 ;misc register val
                                                            ue
  172 00000034 00000033        DCD              0x33        ;ddr mode register 
                                                            settings
  173 00000038 04000000        DCD              EXTMODE1G   ;set BA1 for extend
                                                            ed mode reg all oth
                                                            er 0
  174 0000003C         
  175 0000003C         ;; Initialze DDR memory on CS0



ARM Macro Assembler    Page 75 


  176 0000003C         ;; R0 has pointer to parameter block e.g DRAM256M above
  177 0000003C         ;; during execution registers are:
  178 0000003C         ;; R0 Control register value
  179 0000003C         ;; R1 Config register value
  180 0000003C         ;; R2 Misc Register value
  181 0000003C         ;; R3 Mode register
  182 0000003C         ;; R4 Extended mode register
  183 0000003C         ;; R5 CSD0 base address
  184 0000003C         ;; R6 scratch
  185 0000003C         ;; R7 Dram controller register base address
  186 0000003C         
  187 0000003C         Init_ddr_sdram
  188 0000003C E1A05000        mov              r5,r0
  189 00000040 E895001F        ldmia            r5,{r0,r1,r2,r3,r4}
  190 00000044 E59F71C8        ldr              r7,=ESDCTL_BASE_ADDR ;; base ad
                                                            dress of MISC regis
                                                            ter
  191 00000048 E3A05102        ldr              r5,=SDRAM_CSD_0_BASE ;; CSD0 ba
                                                            se address
  192 0000004C E382600A        orr              r6,r2,#(1<<1)+(1<<3) ;; set bit
                                                            s 1 and 3 to reset 
                                                            controller and dela
                                                            y line
  193 00000050 E5876010        str              r6,[r7,#ESDMISC_OFFSET] ;; Rese
                                                            t the ESDRAMC
  194 00000054         wait_ddr_ready
  195 00000054 E5976010        ldr              r6,[r7,#ESDMISC_OFFSET] ;; Rese
                                                            t the ESDRAMC
  196 00000058 E3160102        tst              r6,#(1<<31) ;; read from MISC r
                                                            egister to see if r
                                                            eady (after 200 uSe
                                                            c delay finished)
  197 0000005C 0AFFFFFC        beq              wait_ddr_ready ;; if still zero
                                                            , then branch till 
                                                            set
  198 00000060 E1A00000        nop                          ;; need one NOP her
                                                            e per spec
  199 00000064 E5871004        str              r1,[r7,#ESDCFG0_OFFSET] ;; writ
                                                            e to configure CONF
                                                            IG0 register
  200 00000068         
  201 00000068 E3806201        orr              r6,r0,#SMODE_PRE_CH ;; settings
                                                             for precharge mode
                                                             SMODE=001
  202 0000006C E3C66B3B        and              r6,r6,#REFRESH_DISABLE ;; disab
                                                            le precharge etc
  203 00000070 E5876000        str              r6,[r7,#ESDCTL0_OFFSET] ;; writ
                                                            e control register 
                                                            settings for precha
                                                            rge mode
  204 00000074         
  205 00000074 E5851400        str              r1,[r5,#0x400] ;; write to prec
                                                            harge CSD0 A10 =1 m
                                                            eans all banks
  206 00000078         
  207 00000078 E3806202        orr              r6,r0,#SMODE_AUTO_RF ;; auto re
                                                            fresh mode SMODE=01
                                                            0
  208 0000007C         ;; note some examples from FS show aut_RF disabled when 



ARM Macro Assembler    Page 76 


                       sending this command our old code leaves the these on
  209 0000007C         ;; removing the comment below masks the auto refresh tim
                       er settings off
  210 0000007C E3C66B3B        and              r6,r6,#REFRESH_DISABLE ;; disab
                                                            le precharge etc
  211 00000080 E5876000        str              r6,[r7,#ESDCTL0_OFFSET] ;; writ
                                                            e control register 
                                                            settings for auto r
                                                            efresh mode
  212 00000084         
  213 00000084 E5856000        str              r6,[r5]     ;; write to run aut
                                                            o-refresh cycle to 
                                                            array CSD0 #1 data 
                                                            is dont care
  214 00000088 E5856000        str              r6,[r5]     ;; write to run aut
                                                            o-refresh cycle to 
                                                            array CSD0 #2
  215 0000008C         
  216 0000008C E3806203        orr              r6,r0,#SMODE_LOAD_MR ;; setting
                                                            s for load mode reg
                                                            isters SMODE=011
  217 00000090 E3C66B3B        and              r6,r6,#REFRESH_DISABLE ;; disab
                                                            le precharge etc
  218 00000094 E5876000        str              r6,[r7,#ESDCTL0_OFFSET] ;; writ
                                                            e control register 
                                                            settings for load m
                                                            ode registers mode
  219 00000098 E7C36005        strb             r6,[r3,r5]  ;; write to set sta
                                                            ndard mode register
                                                             value
  220 0000009C E7C46005        strb             r6,[r4,r5]  ;; write to set sta
                                                            ndard mode register
                                                             value
  221 000000A0         
  222 000000A0 E5870000        str              r0,[r7,#ESDCTL0_OFFSET] ;; writ
                                                            e to setup CSD0 for
                                                             normal operation
  223 000000A4         
  224 000000A4         ;;
  225 000000A4         ;;Delay Added to prevent memory failures at startup.  Wh
                       en boot runs from iRAM of the iMX25
  226 000000A4         ;; this delay is needed.  Believed to be needed to accou
                       nt for the wait time after the
  227 000000A4         ;; extended mode register is written
  228 000000A4         ;;
  229 000000A4 E3A06060        ldr              r6,=0x60    ;; load loop counte
                                                            r, each loop should
                                                             be one refresh cyc
                                                            le
  230 000000A8         post_init_delay
  231 000000A8 E1C550B0        strh             r5,[r5]     ;; write somthing t
                                                            o set up csd0 dq pi
                                                            ns
  232 000000AC E2566001        subs             r6,r6,#1    ;; decrease counter
                                                             value
  233 000000B0 1AFFFFFC        bne              post_init_delay
  234 000000B4 E12FFF1E        bx               lr          ;; return
  235 000000B8         
  236 000000B8         



ARM Macro Assembler    Page 77 


  237 000000B8         ;;
  238 000000B8         ;;******************************************************
                       ************************************************
  239 000000B8                 ELSE                         ;;MXL
  333                          ENDIF                        ;;end sdram setup
  334 000000B8         ;;******************************************************
                       ************************************************
  335 000000B8         
  336 000000B8         ;;******************************************************
                       ************************************************
  337 000000B8         ;; sdram memory test values
  338 000000B8         ;;
  339 000000B8 5A5A1234 
                       LOW_MEM_TEST_VALUE
                               EQU              0x5a5a1234  ;; r4 temp holds lo
                                                            w mem test value
  340 000000B8 A5A54321 
                       HIGH_MEM_TEST_VALUE
                               EQU              0xa5a54321  ;; r5 temp holds lo
                                                            w mem test value
  341 000000B8         
  342 000000B8         ;;
  343 000000B8         ;;******************************************************
                       ************************************************
  344 000000B8                 IF               ((platform_current = "imx25") |
| (platform_current = "imx27"))
  345 000000B8         ;;******************************************************
                       ************************************************
  346 000000B8         ;;
  347 000000B8         ;;Mem Size Test
  348 000000B8         ;;
  349 000000B8         ;; bare bones check, don't want to waste any time actual
                       ly testing memory,
  350 000000B8         ;; so just write a couple locations, enough to no differ
                       ence between NO mem / 128MB
  351 000000B8         ;;
  352 000000B8         ;; Exit -->
  353 000000B8         ;; Shared table entry SIZE_OF_SDRAM_S has been loaded wi
                       th an error value corresponding to SDRAM size found in t
                       he mem size test,
  354 000000B8         ;; and the results are represented by the following list
                       :
  355 000000B8         ;;
  356 000000B8         ;;         0 --> write to low location did not read --> 
                       no RAM?  (seems unlikely with RAM test done just before 
                       calling this)
  357 000000B8         ;;  MXL returns:
  358 000000B8         ;;         1 --> write to low location read, write to hi
                       gh location also read at low location --> 8MB
  359 000000B8         ;;         2 --> write to low location reads, write to h
                       igh location reads --> 16mB
  360 000000B8         ;;         3 --> write to low location reads, write to h
                       igh doesn't read --> no idea, treat in later life as 8MB
                       , but be very afraid!!
  361 000000B8         ;; Imx27 returns:
  362 000000B8         ;;         1 --> write to low location reads, write to h
                       igh location reads --> 8MB
  363 000000B8         ;;         2 --> write to low location reads, write to h
                       igh location reads --> 16mB



ARM Macro Assembler    Page 78 


  364 000000B8         ;;         4 --> write to low location reads, write to h
                       igh location reads --> 32MB
  365 000000B8         ;;         5 --> write to low location reads, write to h
                       igh location reads --> 128MB
  366 000000B8         ;;         6 --> write to low location reads, write to h
                       igh doesn't read --> no idea, have less than 8MB, but be
                        very afraid!!
  367 000000B8         ;;
  368 000000B8         
  369 000000B8 06000000 
                       ONE_TWO_EIGHT_MEM_ERROR_ADDR_A
                               EQU              0x06000000  ;; error address #A
                                                             for 128M test, whi
                                                            ch correctly writes
                                                             to 0x07000000
  370 000000B8 01000000 
                       ONE_TWO_EIGHT_MEM_ERROR_ADDR_B
                               EQU              0x01000000  ;; error address #B
                                                             for 128M test, whi
                                                            ch correctly writes
                                                             to 0x07000000
  371 000000B8 01800000 
                       THREE_TWO_MEM_ERROR_ADDR_A
                               EQU              0x01800000  ;; error address #A
                                                             for 32M test, whic
                                                            h correctly writes 
                                                            to 0x01C00000
  372 000000B8 00C00000 
                       THREE_TWO_MEM_ERROR_ADDR_B
                               EQU              0x00C00000  ;; error address #B
                                                             for 32M test, whic
                                                            h correctly writes 
                                                            to 0x01C00000
  373 000000B8 00600000 
                       ONE_SIX_MEM_ERROR_ADDR
                               EQU              0x00600000  ;; error address fo
                                                            r 16M test, which c
                                                            orrectly writes to 
                                                            0x00E00000      //l
                                                            mc  this one value 
                                                            may not be correct 
                                                            - test
  374 000000B8         
  375 000000B8         
  376 000000B8         WhatIsMemSizeMB
  377 000000B8         
  378 000000B8 E3A02102        ldr              r2,=ExternalRamBase
  379 000000BC E2822302        add              r2,r2,#SZ_128M
  380 000000C0 E2422401        sub              r2,r2,#SZ_16M ;; r2 holds temp 
                                                            variable of last 16
                                                            M area of 128MB, if
                                                             it exists
  381 000000C4 E59F314C        ldr              r3,=HIGH_MEM_TEST_VALUE ;; r3 t
                                                            emp holds high mem 
                                                            test value
  382 000000C8 E5823000        str              r3,[r2]     ;; write high mem t
                                                            est value to high m
                                                            em
  383 000000CC E3A02102        ldr              r2,=ExternalRamBase



ARM Macro Assembler    Page 79 


  384 000000D0 E2822402        add              r2,r2,#SZ_32M
  385 000000D4 E2422501        sub              r2,r2,#SZ_4M ;; r2 holds temp v
                                                            ariable of last 4M 
                                                            area of 32MB, if it
                                                             exists
  386 000000D8 E5823000        str              r3,[r2]     ;; write high mem t
                                                            est value to high m
                                                            em
  387 000000DC E3A02102        ldr              r2,=ExternalRamBase
  388 000000E0 E2822401        add              r2,r2,#SZ_16M
  389 000000E4 E2422602        sub              r2,r2,#SZ_2M ;; r2 holds temp v
                                                            ariable of last 2M 
                                                            area of 16MB, if it
                                                             exists
  390 000000E8 E5823000        str              r3,[r2]     ;; write high mem t
                                                            est value to high m
                                                            em
  391 000000EC E3A02102        ldr              r2,=ExternalRamBase
  392 000000F0 E2822502        add              r2,r2,#SZ_8M
  393 000000F4 E2422601        sub              r2,r2,#SZ_1M ;; r2 holds temp v
                                                            ariable of last 1M 
                                                            area of 8MB, if it 
                                                            exists
  394 000000F8 E5823000        str              r3,[r2]     ;; write high mem t
                                                            est value to high m
                                                            em
  395 000000FC E59F3118        ldr              r3,=LOW_MEM_TEST_VALUE ;; r3 te
                                                            mp holds low mem te
                                                            st value
  396 00000100 E3A01102        ldr              r1,=ExternalRamBase ;; r1 temp 
                                                            variable has first 
                                                            location in RAM
  397 00000104 E2811406        add              r1,r1,#ONE_TWO_EIGHT_MEM_ERROR_
ADDR_A
  398 00000108 E5813000        str              r3,[r1]     ;; store low mem te
                                                            st value out to 128
                                                            M ERROR memory loca
                                                            tion second, so it 
                                                            writes over last va
                                                            lue if in lower siz
                                                            e
  399 0000010C E3A01102        ldr              r1,=ExternalRamBase ;; r1 temp 
                                                            variable has first 
                                                            location in RAM
  400 00000110 E2811401        add              r1,r1,#ONE_TWO_EIGHT_MEM_ERROR_
ADDR_B
  401 00000114 E5813000        str              r3,[r1]     ;; store low mem te
                                                            st value out to 128
                                                            M ERROR memory loca
                                                            tion second, so it 
                                                            writes over last va
                                                            lue if in lower siz
                                                            e
  402 00000118 E3A01102        ldr              r1,=ExternalRamBase ;; r1 temp 
                                                            variable has first 
                                                            location in RAM
  403 0000011C E2811506        add              r1,r1,#THREE_TWO_MEM_ERROR_ADDR
_A
  404 00000120 E5813000        str              r3,[r1]     ;; store low mem te



ARM Macro Assembler    Page 80 


                                                            st value out to 32M
                                                             ERROR memory locat
                                                            ion second, so it w
                                                            rites over last val
                                                            ue if in lower size
                                                            
  405 00000124 E3A01102        ldr              r1,=ExternalRamBase ;; r1 temp 
                                                            variable has first 
                                                            location in RAM
  406 00000128 E2811503        add              r1,r1,#THREE_TWO_MEM_ERROR_ADDR
_B
  407 0000012C E5813000        str              r3,[r1]     ;; store low mem te
                                                            st value out to 32M
                                                             ERROR memory locat
                                                            ion second, so it w
                                                            rites over last val
                                                            ue if in lower size
                                                            
  408 00000130 E3A01102        ldr              r1,=ExternalRamBase ;; r1 temp 
                                                            variable has first 
                                                            location in RAM
  409 00000134 E2811606        add              r1,r1,#ONE_SIX_MEM_ERROR_ADDR
  410 00000138 E5813000        str              r3,[r1]     ;; store low mem te
                                                            st value out to 16M
                                                             ERROR memory locat
                                                            ion second, so it w
                                                            rites over last val
                                                            ue if in lower size
                                                            
  411 0000013C E3A01102        ldr              r1,=ExternalRamBase ;; r1 temp 
                                                            variable has first 
                                                            location in RAM
  412 00000140 E5813000        str              r3,[r1]     ;; store low mem te
                                                            st value out to low
                                                             memory location se
                                                            cond, so it writes 
                                                            over last value if 
                                                            mirrored
  413 00000144 E5910000        ldr              r0,[r1]     ;; read low mem
  414 00000148 E1530000        cmp              r3,r0       ;; compare read wit
                                                            h write value
  415 0000014C 0A000002        beq              RamLowOk    ;; branch if read b
                                                            ack of low mem was 
                                                            OK
  416 00000150         
  417 00000150         ;;
  418 00000150         ;; total failure, even write to the first address in Ram
                        failed ... by the way if this fails, the mem test shoul
                       d have failed!!
  419 00000150         ;; But in the event that it does fail, inform the rest o
                       f the system by storing a 0 in the shared table entrys a
                       ssociated with SDRAM size
  420 00000150         ;;
  421 00000150 E3A01000        ldr              r1,=0       ;;save to MEMORY_SI
                                                            ZE, the actual mem 
                                                            size
  422 00000154 E3A00000        ldr              r0,=0       ;;save to SIZE_OF_S
                                                            DRAM_S, the sdram s
                                                            ize error informati



ARM Macro Assembler    Page 81 


                                                            on
  423 00000158 EA000026        b                RamTestFinished
  424 0000015C         
  425 0000015C         RamLowOk
  426 0000015C E3A02102        ldr              r2,=ExternalRamBase
  427 00000160 E2822302        add              r2,r2,#SZ_128M
  428 00000164 E2422401        sub              r2,r2,#SZ_16M ;; r2 holds temp 
                                                            variable of last 16
                                                            M area of 128MB, if
                                                             it exists
  429 00000168 E5920000        ldr              r0,[r2]     ;; read high mem ba
                                                            ck
  430 0000016C E59F30A4        ldr              r3,=HIGH_MEM_TEST_VALUE ;; r3 t
                                                            emp holds high mem 
                                                            test value
  431 00000170 E1500003        cmp              r0,r3
  432 00000174 0A000014        beq              got128MBofRAM ;; branch if read
                                                             back of upper mem 
                                                            of 128M was OK
  433 00000178 E3A02102        ldr              r2,=ExternalRamBase
  434 0000017C E2822402        add              r2,r2,#SZ_32M
  435 00000180 E2422501        sub              r2,r2,#SZ_4M ;; r2 holds temp v
                                                            ariable of last 4M 
                                                            area of 32MB, if it
                                                             exists
  436 00000184 E5920000        ldr              r0,[r2]     ;; read high mem ba
                                                            ck
  437 00000188 E1500003        cmp              r0,r3
  438 0000018C 0A000011        beq              got32MBofRAM ;; branch if read 
                                                            back of upper mem o
                                                            f 32M was OK
  439 00000190 E3A02102        ldr              r2,=ExternalRamBase
  440 00000194 E2822401        add              r2,r2,#SZ_16M
  441 00000198 E2422602        sub              r2,r2,#SZ_2M ;; r2 holds temp v
                                                            ariable of last 2M 
                                                            area of 16MB, if it
                                                             exists
  442 0000019C E5920000        ldr              r0,[r2]     ;; read high mem ba
                                                            ck
  443 000001A0 E1500003        cmp              r0,r3
  444 000001A4 0A00000E        beq              got16MBofRAM ;; branch if read 
                                                            back of upper mem o
                                                            f 16M was OK
  445 000001A8 E3A02102        ldr              r2,=ExternalRamBase
  446 000001AC E2822502        add              r2,r2,#SZ_8M
  447 000001B0 E2422601        sub              r2,r2,#SZ_1M ;; r2 holds temp v
                                                            ariable of last 1M 
                                                            area of 8MB, if it 
                                                            exists
  448 000001B4 E5920000        ldr              r0,[r2]     ;; read high mem ba
                                                            ck
  449 000001B8 E1500003        cmp              r0,r3
  450 000001BC 0A00000B        beq              got8MBofRAM ;; branch if read b
                                                            ack of upper mem of
                                                             8M was OK
  451 000001C0         
  452 000001C0         ;; if I got here I have no idea... must have less memory
                        than 8MB, but why?
  453 000001C0         ;; so return a six in SIZE_OF_SDRAM_S to question result



ARM Macro Assembler    Page 82 


                       s, and 0M (0x00000000) in MEMORY_SIZE for unknown size
  454 000001C0         ;;
  455 000001C0 E3A01000        ldr              r1,=0       ;;save to MEMORY_SI
                                                            ZE, the actual mem 
                                                            size
  456 000001C4 E3A00006        ldr              r0,=6       ;;save to SIZE_OF_S
                                                            DRAM_S, the size re
                                                            turn information
  457 000001C8 EA00000A        b                RamTestFinished
  458 000001CC         
  459 000001CC         ;; Return a five in SIZE_OF_SDRAM_S to indicate 128 meg,
                        and 1288M (0x08000000) in MEMORY_SIZE for actual size f
                       ound
  460 000001CC         ;;
  461 000001CC         got128MBofRAM
  462 000001CC E3A01302        ldr              r1,=SZ_128M ;;save to MEMORY_SI
                                                            ZE, the actual mem 
                                                            size
  463 000001D0 E3A00005        ldr              r0,=5       ;;save to SIZE_OF_S
                                                            DRAM_S, the size er
                                                            ror information
  464 000001D4 EA000007        b                RamTestFinished
  465 000001D8         
  466 000001D8         ;; Return a four in SIZE_OF_SDRAM_S to indicate 32 meg, 
                       and 32M (0x02000000) in MEMORY_SIZE for actual size foun
                       d
  467 000001D8         ;;
  468 000001D8         got32MBofRAM
  469 000001D8 E3A01402        ldr              r1,=SZ_32M  ;;save to MEMORY_SI
                                                            ZE, the actual mem 
                                                            size
  470 000001DC E3A00004        ldr              r0,=4       ;;save to SIZE_OF_S
                                                            DRAM_S, the size er
                                                            ror information
  471 000001E0 EA000004        b                RamTestFinished
  472 000001E4         
  473 000001E4         ;; Return a two in SIZE_OF_SDRAM_S to indicate 16 meg, a
                       nd 32M (0x01000000) in MEMORY_SIZE for actual size found
                       
  474 000001E4         ;;
  475 000001E4         got16MBofRAM
  476 000001E4 E3A01401        ldr              r1,=SZ_16M  ;;save to MEMORY_SI
                                                            ZE, the actual mem 
                                                            size
  477 000001E8 E3A00002        ldr              r0,=2       ;;save to SIZE_OF_S
                                                            DRAM_S, the size er
                                                            ror information
  478 000001EC EA000001        b                RamTestFinished
  479 000001F0         
  480 000001F0         ;; Return a one in SIZE_OF_SDRAM_S to indicate 8 meg, an
                       d 8M (0x00800000) in MEMORY_SIZE for actual size found
  481 000001F0         ;;
  482 000001F0         got8MBofRAM
  483 000001F0 E3A01502        ldr              r1,=SZ_8M   ;;save to MEMORY_SI
                                                            ZE, the actual mem 
                                                            size
  484 000001F4 E3A00001        ldr              r0,=1       ;;save to SIZE_OF_S
                                                            DRAM_S, the size er
                                                            ror information



ARM Macro Assembler    Page 83 


  485 000001F8         
  486 000001F8         RamTestFinished
  487 000001F8 E59F3020        ldr              r3,=MEMORY_SIZE ;; r3 has the s
                                                            hared table locatio
                                                            n to store the resu
                                                            lting actual size
  488 000001FC E5831000        str              r1,[r3]
  489 00000200 E59F301C        ldr              r3,=SIZE_OF_SDRAM_S ;; r3 has t
                                                            he shared table loc
                                                            ation to store the 
                                                            resulting sdram siz
                                                            e error information
                                                            
  490 00000204 E5830000        str              r0,[r3]
  491 00000208         
  492 00000208 E12FFF1E        bx               lr          ;;return
  493 0000020C         
  494 0000020C         ;;
  495 0000020C         ;;******************************************************
                       ************************************************
  496 0000020C                 ELSE                         ;;MXL
  573                          ENDIF                        ;;end memory size c
                                                            heck
  574 0000020C         ;;******************************************************
                       ************************************************
  575 0000020C         ;;
  576 0000020C         
  577 0000020C         ;;
  578 0000020C         ;;******************************************************
                       ************************************************
  579 0000020C                 IF               MEMORY_DEBUG ;;Turn on memory d
                                                            ebug tests in Db_hd
                                                            w.s
  779 0000020C         ;;******************************************************
                       ************************************************
  780 0000020C         ;;
  781 0000020C         Test_ram_memory
  782 0000020C         Set_ram_to_zero
  783 0000020C E3A00000        ldr              r0,=0       ;;return 0 for pass
                                                            
  784 00000210         
  785 00000210 E12FFF1E        bx               lr          ;;return
  786 00000214         
  787 00000214         
  788 00000214         ;;
  789 00000214         ;;******************************************************
                       ************************************************
  790 00000214                 ENDIF                        ;;end memory debug 
                                                            tests
  791 00000214         ;;******************************************************
                       ************************************************
  792 00000214         ;;
  793 00000214         
  794 00000214         ;;
  795 00000214         ;;******************************************************
                       ************************************************
  796 00000214         ;;
  797 00000214         ;; Do a fast copy (44 bytes at a time).  Arguments are a
                       s follows:



ARM Macro Assembler    Page 84 


  798 00000214         ;; R0 - Destination address
  799 00000214         ;; R1 - Source address
  800 00000214         ;; R2 - Number of bytes to copy
  801 00000214         ;;
  802 00000214         ;; NOTE: Make sure that the only data memory usage by th
                       is routine is on the stack.  This routine may be used to
                        relocate code and may scribble
  803 00000214         ;;   on data space.  This also implies that constants sh
                       ould be one byte.
  804 00000214         ;;
  805 00000214 B8001000 
              A5A54321 
              5A5A1234 
              80000C20 
              80000C10         AREA             FASTMEMCPY,CODE,READONLY
  806 00000000         Fast_memcpy
  807 00000000 E92D5FFF        stmdb            sp!,{r0-r12,lr}
  808 00000004         
  809 00000004 E1A0B000        mov              r11,r0
  810 00000008 E1A0C001        mov              r12,r1
  811 0000000C E1A0E002        mov              r14,r2
  812 00000010         
  813 00000010         ;  If either the source or destination address is not lo
                       ngword aligned, do a single
  814 00000010         ;  byte (SLOW!) copy.
  815 00000010         ;;
  816 00000010 E2000003        and              r0,r0,#3
  817 00000014 E3500000        cmp              r0,#0
  818 00000018 1A000009        bne              Fast_memcpy_copy_single_bytes_a
t_a_time
  819 0000001C E2011003        and              r1,r1,#3
  820 00000020 E3510000        cmp              r1,#0
  821 00000024 1A000006        bne              Fast_memcpy_copy_single_bytes_a
t_a_time
  822 00000028         
  823 00000028 E35E002C        cmp              r14,#44
  824 0000002C BA000004        blt              Fast_memcpy_copy_single_bytes_a
t_a_time
  825 00000030         
  826 00000030         Fast_memcpy_copy_until_we_have_less_than_44_bytes_left
  827 00000030 E8BC07FF        ldmia            r12!, {r0-r10} ; Copy 44 bytes 
                                                            at a time...
  828 00000034 E8AB07FF        stmia            r11!, {r0-r10}
  829 00000038 E24EE02C        sub              r14,r14,#44
  830 0000003C E35E002C        cmp              r14,#44     ; If we don't have 
                                                            at least 44 bytes l
                                                            eft, let's go to a 
                                                            smaller copy
  831 00000040 AAFFFFFA        bge              Fast_memcpy_copy_until_we_have_
less_than_44_bytes_left
  832 00000044         
  833 00000044         Fast_memcpy_copy_single_bytes_at_a_time
  834 00000044 E35E0000        cmp              r14,#0
  835 00000048 DA000003        ble              Fast_memcpy_finish
  836 0000004C         
  837 0000004C         Fast_memcpy_copy_until_no_bytes_are_left
  838 0000004C E4DC0001        ldrb             r0,[r12],#1
  839 00000050 E4CB0001        strb             r0,[r11],#1
  840 00000054 E25EE001        subs             r14,r14,#1



ARM Macro Assembler    Page 85 


  841 00000058 CAFFFFFB        bgt              Fast_memcpy_copy_until_no_bytes
_are_left
  842 0000005C         
  843 0000005C         
  844 0000005C         Fast_memcpy_finish
  845 0000005C E8BD9FFF        ldmia            sp!,{r0-r12,pc}
  846 00000060         
  847 00000060         
  848 00000060         
  849 00000060                 END
Command Line: --debug --cpu=ARM926EJ-S --fpu=None --apcs=/interwork --depend=Ou
tput_APP_imx25_ID_FF3_3110/db_mem.d -oOutput_APP_imx25_ID_FF3_3110/db_mem.o -ID
:\Super2D\source\Gen6FoundationApp/libraries/OsKernel/app_kernel -ID:\Super2D\s
ource\Gen6FoundationApp/libraries/OsKernel/db_shared -ID:\Super2D\source\Gen6Fo
undationApp/libraries/OsKernel/temp_shared -ID:\Super2D\source\Gen6FoundationAp
p/libraries/OsKernel/db_shared/Hardware_Header_Files -ID:\Super2D\source\Gen6Fo
undationApp/libraries/OsKernel/db_shared/Hardware_Header_Files/iMXL -ID:\Super2
D\source\Gen6FoundationApp/libraries/OsKernel/db_shared/Hardware_Header_Files/i
MX27 -ID:\Super2D\source\Gen6FoundationApp/libraries/OsKernel/db_shared/Hardwar
e_Header_Files/iMX25 -ID:\Super2D\source\Gen6FoundationApp/FoundationApp -ID:\S
uper2D\source\Gen6FoundationApp/FoundationApp/Batch_Mode -ID:\Super2D\source\Ge
n6FoundationApp/FoundationApp/Foundation_Temp -ID:\Super2D\source\Gen6Foundatio
nApp/FoundationApp/Imaging -ID:\Super2D\source\Gen6FoundationApp/FoundationApp/
Flash -ID:\Super2D\source\Gen6FoundationApp/FoundationApp/Peripheral_Interfaces
 -ID:\Super2D\source\Gen6FoundationApp/FoundationApp/PageButton -ID:\Super2D\so
urce\Gen6FoundationApp/FoundationApp/Trigger -ID:\Super2D\source\Gen6Foundation
App/FoundationApp/menu -ID:\Super2D\source\Gen6FoundationApp/FoundationApp/eci 
-ID:\Super2D\source\Gen6FoundationApp/FoundationApp/LeanAutomationTest -ID:\Sup
er2D\source\Gen6FoundationApp/FoundationApp/dirt_test -ID:\Super2D\source\Gen6F
oundationApp/FoundationApp/PSOC -ID:\Super2D\source\Gen6FoundationApp/Foundatio
nApp/Plugin -ID:\Super2D\source\Gen6FoundationApp/hhpscandriver -ID:\Super2D\so
urce\Gen6FoundationApp/libraries/stringanddata -ID:\Super2D\source\Gen6Foundati
onApp/libraries/CommandParsers -ID:\Super2D\source\Gen6FoundationApp/libraries/
buffer_fifo_utils -ID:\Super2D\source\Gen6FoundationApp/libraries/Safe_FFS/src/
common -ID:\Super2D\source\Gen6FoundationApp/libraries/Safe_FFS/src/nor -ID:\Su
per2D\source\Gen6FoundationApp/libraries/Safe_FFS/src/nor/phy/Numonyx_winbond -
ID:\Super2D\source\Gen6FoundationApp/libraries/G6_configuration -ID:\Super2D\so
urce\Gen6FoundationApp/libraries/Communication_Gen6 -ID:\Super2D\source\Gen6Fou
ndationApp/libraries/Communication_Gen6/Matrix -ID:\Super2D\source\Gen6Foundati
onApp/libraries/compression -ID:\Super2D\source\Gen6FoundationApp/libraries/sha
red_matrix_interfaces/interfaces -ID:\Super2D\source\Gen6FoundationApp/librarie
s/shared_matrix_interfaces/interfaces_hw -ID:\Super2D\source\Gen6FoundationApp/
libraries/shared_matrix_interfaces/interfaces_rf -ID:\Super2D\source\Gen6Founda
tionApp/libraries/shared_matrix_interfaces/interfaces_wedge -ID:\Super2D\source
\Gen6FoundationApp/libraries/shared_matrix_interfaces/interfaces_wedge_hw -ID:\
Super2D\source\Gen6FoundationApp/libraries/shared_matrix_interfaces/customizati
on -ID:\Super2D\source\Gen6FoundationApp/libraries/Cryptography -ID:\Super2D\so
urce\Gen6FoundationApp/libraries/G6_Imaging -ID:\Super2D\source\Gen6FoundationA
pp/libraries/HHPL_Script -ID:\Super2D\source\Gen6FoundationApp/libraries/HHPL_S
cript/Gen6 -ID:\Super2D\source\Gen6FoundationApp/libraries/shared_matrix_interf
aces/interfaces_usb2_hw -ID:\Super2D\source\Gen6FoundationApp/libraries/shared_
matrix_interfaces/interfaces_usb2/base_usb2 -ID:\Super2D\source\Gen6FoundationA
pp/libraries/shared_matrix_interfaces/interfaces_usb2/cdcacm_usb2 -ID:\Super2D\
source\Gen6FoundationApp/libraries/shared_matrix_interfaces/interfaces_usb2/hid
_usb2/hidbase_usb2 -ID:\Super2D\source\Gen6FoundationApp/libraries/shared_matri
x_interfaces/interfaces_usb2/hid_usb2/pos_usb2 -ID:\Super2D\source\Gen6Foundati
onApp/libraries/shared_matrix_interfaces/interfaces_usb2/hid_usb2/surepos_usb2 
-ID:\Super2D\source\Gen6FoundationApp/libraries/shared_matrix_interfaces/interf
aces_usb2/hid_usb2/kbdpc_usb2 -ID:\Super2D\source\Gen6FoundationApp/libraries/s



ARM Macro Assembler    Page 86 


hared_matrix_interfaces/interfaces_usb2/rem -ID:\Super2D\source\Gen6FoundationA
pp/FoundationApp/mocf -ID:\Super2D\source\Gen6FoundationApp/FoundationApp/mocf/
shared -ID:\Super2D\source\Gen6FoundationApp/FoundationApp/mocf/shared/sha1 -ID
:\Super2D\source\Gen6FoundationApp/libraries/DecoderLib -ID:\Super2D\source\Gen
6FoundationApp/libraries/DecoderLib/Source --predefine="platform_current SETS \
"imx25\"" --predefine="CORDED SETL {TRUE}" --predefine="Board_TARGET SETS \"iMX
25_Development\"" --list=Output_APP_imx25_ID_FF3_3110/db_mem.lst D:\Super2D\sou
rce\Gen6FoundationApp\libraries\OsKernel\db_shared\db_mem.s
